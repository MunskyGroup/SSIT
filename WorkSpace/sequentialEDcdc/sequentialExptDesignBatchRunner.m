function sequentialExptDesignBatchRunner(iModel,iDesign,rngSeed)

nRounds = 8;
initialExperiment = [];
nFIMsamples = 10;

switch iDesign
    case 1
        design = 'fimopt';
    case 2
        design = 'random';
end

switch iModel
    case 1 % Poisson
        %% Poisson Model With Chainging Input
        truePars = {'kr',10;'gr',0.3;'kD',5};
        inputLibrary = {{'IDex','1'},{'IDex','2'},{'IDex','3'},{'IDex','4'},{'IDex','5'},{'IDex','6'},...
            {'IDex','7'},{'IDex','8'},{'IDex','9'},{'IDex','10'}};
        model = 'poisson';
        numCellsPerExperiment = 60;
        initialParGuess = ones(1,3);
        datType = 'simulated';
        nInputs = length(inputLibrary);
        nT = 21;
        initialExperiment = zeros(nInputs,nT);
        initialExperiment(1,[1,7,14,21]) = round(numCellsPerExperiment/4);
    
    case 2
        %% GR Model (Simulated Data)
        load EricModel_MMDex GRpars
        truePars = {'kcn0',GRpars(1);'kcn1',GRpars(2);'knc',GRpars(4);...
            'kg1',GRpars(5);'gnuc',GRpars(7);'MDex',GRpars(8)};

        inputLibrary = {{'IDex','1'},{'IDex','10'},{'IDex','100'}};
        initialParGuess = 10.^[-2 -1 -1 -2 -2 1];
        model = 'dexgr';
        numCellsPerExperiment = 60;
        datType = 'simulated';

        initialExperiment = zeros(3,7);
        initialExperiment(3,[1,4,7]) = 20;
        initialExperiment(1:3,4) = 20;
    
    case 3
        %% GR Model (Real Data)
        load EricModel_MMDex GRpars
        truePars = {'kcn0',GRpars(1);'kcn1',GRpars(2);'knc',GRpars(4);...
            'kg1',GRpars(5);'gnuc',GRpars(7);'MDex',GRpars(8)};

        inputLibrary = {{'IDex','1'},{'IDex','10'},{'IDex','100'}};
        initialParGuess = 10.^[-2 -1 -1 -2 -2 1];
        model = 'dexgr';
        numCellsPerExperiment = 60;
        datType = 'real';

        initialExperiment = zeros(3,7);
        initialExperiment(3,[1,4,7]) = 20;
        initialExperiment(1:3,4) = 20;
end


TestCases = struct('model',{model},...
    'expDesign',{design},...
    'numCellsPerExperiment',{numCellsPerExperiment},...
    'figureSet',{1},...
    'incrementAdd',{10},...
    'truePars',{truePars},...
    'saveFileNamePrefix',{[model,'_',design]}, ...
    'initialParameterGuess',{initialParGuess},...
    'inputLibrary',{inputLibrary},...
    'dataType',{datType});


    %% Burst Model
    % TestCases = struct('model',{'burst','burst'},...
    %     'expDesign',{'fimopt','random'},...
    %     'numCellsPerExperiment',{100,100}, ...
    %     'figureSet',{2,2},...
    %     'incrementAdd',{10,10},...
    %     'truePars',...
    %     {{'kon',0.1;'koff',0.2;'kr',10;'gr',0.3},{'kon',0.1;'koff',0.2;'kr',10;'gr',0.3}});

    %% Uncertain Mechanism Model
    % truePars1 = {'kon',0.1;'koff',0.2;'kr',10;'gr',0.3;'alph',1e-4};
    % truePars2 = {'kon',0.1;'koff',0.2;'kr',10;'gr',0.3;'alph',1e4};
    % alph = 0: Koff Control
    % alph  = inf: Kon Control
    % TestCases = struct('model',{'uncertainburst','uncertainburst','uncertainburst','uncertainburst'},...
    %     'expDesign',{'fimopt','random','fimopt','random'},...
    %     'numCellsPerExperiment',{100,100,100,100}, ...
    %     'figureSet',{1,1,2,2},...
    %     'incrementAdd',{20,20,20,20},...
    %     'truePars',{truePars1,truePars1,truePars2,truePars2},...
    %     'saveFileNamePrefix',{'koffBurstControlFIM','koffBurstControlRAND',...
    %                           'konBurstControlFIM','konBurstControlRAND'}, ...
    %     'initialParameterGuess',{ones(1,5),ones(1,5),ones(1,5),ones(1,5)});

    %% Both Model
    % TestCases = struct('model',{'poisson','poisson','burst','burst'},...
    %     'expDesign',{'fimopt','random','fimopt','random'},...
    %     'numCellsPerExperiment',{40,40,100,100}, ...
    %     'figureSet',{1,1,2,2},...
    %     'incrementAdd',{10,10,10,10},...
    %     'truePars',{{'kr',10;'gr',0.3},{'kr',10;'gr',0.3},...
    %     {'kon',0.1;'koff',0.2;'kr',10;'gr',0.3},{'kon',0.1;'koff',0.2;'kr',10;'gr',0.3}});

    %% Run Sequential Design Simulations
    for i = 1:length(TestCases)
        TestCases(i).saveName = iterativeExperimentRunnerMultiConditions(TestCases(i).model,...
            TestCases(i).dataType,...
            TestCases(i).expDesign,nRounds,rngSeed,rngSeed,...
            TestCases(i).incrementAdd,...
            TestCases(i).numCellsPerExperiment,...
            initialExperiment,nFIMsamples,...
            TestCases(i).truePars,...
            TestCases(i).saveFileNamePrefix,...
            TestCases(i).initialParameterGuess,...
            TestCases(i).inputLibrary);
    end
end