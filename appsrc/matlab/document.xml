<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef SSITGUI < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        GridLayout                      matlab.ui.container.GridLayout
        LeftPanel                       matlab.ui.container.Panel
        RightPanel                      matlab.ui.container.Panel
        TabGroup                        matlab.ui.container.TabGroup
        ModelTab                        matlab.ui.container.Tab
        FileModelLabel                  matlab.ui.control.Label
        ModelSaveButton_2               matlab.ui.control.Button
        RenameSpeciesDropDown           matlab.ui.control.DropDown
        RenameSpeciesDropDownLabel      matlab.ui.control.Label
        SpeciesTable                    matlab.ui.control.Table
        ParametersLabel_3               matlab.ui.control.Label
        ChooseSSITModelLabel            matlab.ui.control.Label
        ChooseSSITModel                 matlab.ui.control.DropDown
        DeleteInputDropDown             matlab.ui.control.DropDown
        DeleteInputDropDownLabel        matlab.ui.control.Label
        AddInputButton                  matlab.ui.control.StateButton
        AbouttheModelLabel              matlab.ui.control.Label
        DeleteSpeciesDropDown           matlab.ui.control.DropDown
        DeleteSpeciesDropDownLabel      matlab.ui.control.Label
        AddSpeciesButton                matlab.ui.control.StateButton
        DeleteReactionDropDown          matlab.ui.control.DropDown
        DeleteReactionDropDown_2Label   matlab.ui.control.Label
        CreateNewNStateModelButton      matlab.ui.control.Button
        LoadSBMLModelButton             matlab.ui.control.Button
        SubFolderLabel                  matlab.ui.control.Label
        FontSizeLabelRxn                matlab.ui.control.Label
        DecreaseFontSizeRxn             matlab.ui.control.Button
        IncreaseFontSizeRxn             matlab.ui.control.Button
        ModelDropDown                   matlab.ui.control.DropDown
        ModelDropDownLabel              matlab.ui.control.Label
        ModelAbout                      matlab.ui.control.TextArea
        ModelLoadButton                 matlab.ui.control.Button
        ModelSaveButton                 matlab.ui.control.Button
        ModelUsePresetExampleTypeDropDown  matlab.ui.control.DropDown
        ModelFolderLabel                matlab.ui.control.Label
        DefineTimeVaryingInputSignalsLabel  matlab.ui.control.Label
        ModelInputTable                 matlab.ui.control.Table
        ParametersLabel                 matlab.ui.control.Label
        ModelParameterTable             matlab.ui.control.Table
        ModelUpdateButton               matlab.ui.control.Button
        ModelhasnotbeenupdatedLabel     matlab.ui.control.Label
        ModelAddReactionButton          matlab.ui.control.StateButton
        ModelReactionTable              matlab.ui.control.Table
        ReactionTextAxes                matlab.ui.control.UIAxes
        StochasticSimulationTab         matlab.ui.container.Tab
        SpeciestoShowListBox            matlab.ui.control.ListBox
        SpeciestoShowListBoxLabel       matlab.ui.control.Label
        SsaShowOdeCheckBox              matlab.ui.control.CheckBox
        FontSizeLabelSsa                matlab.ui.control.Label
        IncreaseFontSizeSsa             matlab.ui.control.Button
        DecreaseFontSizeSSA             matlab.ui.control.Button
        SsaExportExcelButton            matlab.ui.control.Button
        SsaSignalUpdateRateField        matlab.ui.control.EditField
        SignalUpdateRateEditFieldLabel  matlab.ui.control.Label
        SsaNumSimToPlotField            matlab.ui.control.NumericEditField
        NSimsEditFieldLabel             matlab.ui.control.Label
        SSA_hist_YminEditField          matlab.ui.control.NumericEditField
        YminLabel_2                     matlab.ui.control.Label
        SSA_hist_XminEditField          matlab.ui.control.NumericEditField
        XminLabel_2                     matlab.ui.control.Label
        SSA_hist_YmaxEditField          matlab.ui.control.NumericEditField
        YmaxLabel_2                     matlab.ui.control.Label
        SSA_hist_XmaxEditField          matlab.ui.control.NumericEditField
        XmaxLabel_2                     matlab.ui.control.Label
        SsaNonParallelCheckBox          matlab.ui.control.CheckBox
        SsaParallelCheckBox             matlab.ui.control.CheckBox
        SSAYminEditField                matlab.ui.control.NumericEditField
        YminLabel                       matlab.ui.control.Label
        SSAXminEditField                matlab.ui.control.NumericEditField
        XminLabel                       matlab.ui.control.Label
        SSAYmaxEditField                matlab.ui.control.NumericEditField
        YmaxLabel                       matlab.ui.control.Label
        SSAXmaxEditField                matlab.ui.control.NumericEditField
        XmaxLabel                       matlab.ui.control.Label
        SsaSolutionsattimeLabel         matlab.ui.control.Label
        SsaExportHistogramButton        matlab.ui.control.Button
        SsaExportTrajectoriesButton     matlab.ui.control.Button
        SsaExportFiguresButton          matlab.ui.control.Button
        SsaTimeSlider                   matlab.ui.control.Slider
        timeSliderLabel                 matlab.ui.control.Label
        SsaUpdatePlotsButton            matlab.ui.control.Button
        SsaRunStatus                    matlab.ui.control.Label
        showLabel                       matlab.ui.control.Label
        PrintTimesEditField             matlab.ui.control.EditField
        PrintTimesEditFieldLabel        matlab.ui.control.Label
        SsaInitCondField                matlab.ui.control.EditField
        InitialConditionsLabel          matlab.ui.control.Label
        SsaRunButton                    matlab.ui.control.Button
        SsaNumSimField                  matlab.ui.control.NumericEditField
        NumberofSimulationsEditFieldLabel  matlab.ui.control.Label
        SsaHistAxes                     matlab.ui.control.UIAxes
        SsaTrajAxes                     matlab.ui.control.UIAxes
        FSPTab                          matlab.ui.container.Tab
        initApproxSS                    matlab.ui.control.CheckBox
        SpeciestoShowListBox_2          matlab.ui.control.ListBox
        SpeciestoShowListBox_2Label     matlab.ui.control.Label
        ExportFSPDatatoWorkspaceForManualPlotsButton  matlab.ui.control.Button
        LaunchFSPModelReductionToolButton  matlab.ui.control.Button
        FspIntegratorTolerance          matlab.ui.control.DropDown
        ODEToleranceDropDownLabel       matlab.ui.control.Label
        FontSizeLabel_3                 matlab.ui.control.Label
        IncreaseFontSizeFsp             matlab.ui.control.Button
        DecreaseFontSizeFsp             matlab.ui.control.Button
        FspPiecewiseCheckBox            matlab.ui.control.CheckBox
        FspApproximateSteadyStateButton  matlab.ui.control.Button
        FspAutoExpandCheckBox           matlab.ui.control.CheckBox
        FSPYmaxEditField                matlab.ui.control.NumericEditField
        YmaxEditFieldLabel              matlab.ui.control.Label
        FSPYminEditField                matlab.ui.control.NumericEditField
        YminEditFieldLabel              matlab.ui.control.Label
        FSPXmaxEditField                matlab.ui.control.NumericEditField
        XmaxEditFieldLabel              matlab.ui.control.Label
        FSPXminEditField                matlab.ui.control.NumericEditField
        XminEditFieldLabel              matlab.ui.control.Label
        FspJointDistributionPanel       matlab.ui.container.Panel
        vsLabel                         matlab.ui.control.Label
        JointSp2                        matlab.ui.control.ListBox
        JointSp1                        matlab.ui.control.ListBox
        FspJointCreateMovCheckBox       matlab.ui.control.CheckBox
        PlotJointDistributionsButton    matlab.ui.control.Button
        FspMeshCheckBox                 matlab.ui.control.CheckBox
        FspContourCheckBox              matlab.ui.control.CheckBox
        SelectPlotsLabel_3              matlab.ui.control.Label
        SelectSpeciesLabel_4            matlab.ui.control.Label
        FspMeanandVariancePanel         matlab.ui.container.Panel
        SpeciestoShowListBoxMeans       matlab.ui.control.ListBox
        FspMeanVarShowOdeCheckBox       matlab.ui.control.CheckBox
        FspMeanVarPlotButton            matlab.ui.control.Button
        FspMeanVarShowVarianceCheckBox  matlab.ui.control.CheckBox
        SelectPlotsLabel_2              matlab.ui.control.Label
        SelectSpeciesLabel_3            matlab.ui.control.Label
        FspMarginalsOverTimePanel       matlab.ui.container.Panel
        SpeciestoShowListBoxMargFSPvT   matlab.ui.control.ListBox
        FspMarginalTimeCreateMovieCheckBox  matlab.ui.control.CheckBox
        SelectSpeciesLabel_2            matlab.ui.control.Label
        FspMarginalVecField             matlab.ui.control.EditField
        FspPlotMarginalsOverTimeButton  matlab.ui.control.Button
        InputTimePointsLabel            matlab.ui.control.Label
        ChoosePlotsLabel                matlab.ui.control.Label
        FspMarginalsPanel               matlab.ui.container.Panel
        SpeciestoShowListBoxMargFSP     matlab.ui.control.ListBox
        FspPlotMarginalsButton          matlab.ui.control.Button
        SelectSpeciesLabel              matlab.ui.control.Label
        FspSolutionAtTimeLabel          matlab.ui.control.Label
        FspAddConstraintButton          matlab.ui.control.Button
        FspDefaultButton                matlab.ui.control.Button
        FspConstraintsLabel             matlab.ui.control.Label
        FspConstraintTable              matlab.ui.control.Table
        InitialConditionLabel           matlab.ui.control.Label
        FspTimeSlider                   matlab.ui.control.Slider
        timeSlider_2Label               matlab.ui.control.Label
        FspPrintTimesField              matlab.ui.control.EditField
        PrintTimesEditField_2Label      matlab.ui.control.Label
        FspErrorTolField                matlab.ui.control.NumericEditField
        ErrorToleranceEditFieldLabel    matlab.ui.control.Label
        FspUpdatePlotButton             matlab.ui.control.Button
        FspRunningStatus                matlab.ui.control.Label
        FspInitCondField                matlab.ui.control.EditField
        FspRunButtom                    matlab.ui.control.Button
        FspAxes                         matlab.ui.control.UIAxes
        SensitivityTab                  matlab.ui.container.Tab
        ExportSensitivityDatatoWorkspaceForManualPlotsButton  matlab.ui.control.Button
        FontSizeLabel_4                 matlab.ui.control.Label
        IncreaseFontSizeSens            matlab.ui.control.Button
        DecreaseFontSizeSens            matlab.ui.control.Button
        SensParDropDown                 matlab.ui.control.DropDown
        withrespecttoparameterDropDownLabel  matlab.ui.control.Label
        DisplaySpeciesPanel             matlab.ui.container.Panel
        SpeciesForSensPlot              matlab.ui.control.ListBox
        SensRunButton                   matlab.ui.control.Button
        SensPlotTimeSlider              matlab.ui.control.Slider
        TimeSelectorSliderLabel         matlab.ui.control.Label
        SensPrintTimesEditField         matlab.ui.control.EditField
        PrintTimesEditField_3Label      matlab.ui.control.Label
        SensErrorTolEditField           matlab.ui.control.NumericEditField
        ErrorToleranceEditField_2Label  matlab.ui.control.Label
        InitialConditionLabel_2         matlab.ui.control.Label
        SensInitCondField               matlab.ui.control.EditField
        NoteforValuesTextArea           matlab.ui.control.TextArea
        SelectParameterstobeIncludedinSensitivityAnalysisLabel  matlab.ui.control.Label
        SensParameterSelectionTable     matlab.ui.control.Table
        SelectAnalysisTypeforSensitivityButtonGroup  matlab.ui.container.ButtonGroup
        FiniteDifferenceButton          matlab.ui.control.ToggleButton
        SensitivityFunctionButton       matlab.ui.control.ToggleButton
        SensDerivativeAxes              matlab.ui.control.UIAxes
        SensProbAxes                    matlab.ui.control.UIAxes
        FisherInformationTab            matlab.ui.container.Tab
        HoldOnCheckBox                  matlab.ui.control.CheckBox
        ShowDistortionPlotButton        matlab.ui.control.Button
        SetDistortionParametersButton   matlab.ui.control.Button
        DistortionTypeDropDown          matlab.ui.control.DropDown
        DistortionTypeDropDownLabel     matlab.ui.control.Label
        DistortionsLabel                matlab.ui.control.Label
        ModelUncertaintyDropDown        matlab.ui.control.DropDown
        ModelUncertaintyDropDownLabel   matlab.ui.control.Label
        FIMNumMC                        matlab.ui.control.NumericEditField
        NumberMCSamplesoverPriorEditFieldLabel  matlab.ui.control.Label
        PlotStlyeDropDown               matlab.ui.control.DropDown
        PlotStlyeDropDownLabel          matlab.ui.control.Label
        FIMLogTransformCheckBox         matlab.ui.control.CheckBox
        EstimateMLEUncertaintyButton    matlab.ui.control.Button
        PlotInformationvsTimeButton     matlab.ui.control.Button
        SpecifyPriorButton              matlab.ui.control.Button
        ParametersLabel_2               matlab.ui.control.Label
        Label                           matlab.ui.control.Label
        EstimateFisherInformationLabel  matlab.ui.control.Label
        FIMParameter2                   matlab.ui.control.DropDown
        FIMParameter1                   matlab.ui.control.DropDown
        CellsEditField                  matlab.ui.control.NumericEditField
        CellsEditFieldLabel             matlab.ui.control.Label
        foratotalofLabel                matlab.ui.control.Label
        OptimizeButton_2                matlab.ui.control.Button
        orLabel                         matlab.ui.control.Label
        ManuallyAllocateMeasurementsperTimePointButton  matlab.ui.control.Button
        ObservableSpeciesListBox        matlab.ui.control.ListBox
        ObservableSpeciesListBoxLabel   matlab.ui.control.Label
        FIMMetricorParameterDropDown    matlab.ui.control.DropDown
        FIMMetricorParameterDropDownLabel  matlab.ui.control.Label
        NoneLabel                       matlab.ui.control.Label
        AddProbabilisticDistortionEffectsButton  matlab.ui.control.Button
        ListofMeasurementTimesEditField  matlab.ui.control.EditField
        ListofMeasurementTimesEditFieldLabel  matlab.ui.control.Label
        FontSizeLabel_8                 matlab.ui.control.Label
        IncreaseFontSizeData_2          matlab.ui.control.Button
        DecreaseFontSizeData_2          matlab.ui.control.Button
        FIMEllipseAxes                  matlab.ui.control.UIAxes
        plotFIMvsTime                   matlab.ui.control.UIAxes
        DataLoadingandFittingTab        matlab.ui.container.Tab
        SolveandPlotButton              matlab.ui.control.Button
        NumberafterConstraintsLabel     matlab.ui.control.Label
        TotalCellsInDataLabel           matlab.ui.control.Label
        FieldsinDataTextArea            matlab.ui.control.TextArea
        FieldsinDataTextAreaLabel       matlab.ui.control.Label
        ClearConstraintsButton          matlab.ui.control.Button
        DataConstrText6                 matlab.ui.control.EditField
        DataLogical6                    matlab.ui.control.DropDown
        DataConstrChoice6               matlab.ui.control.DropDown
        AndOr6                          matlab.ui.control.DropDown
        DataConstrText5                 matlab.ui.control.EditField
        DataLogical5                    matlab.ui.control.DropDown
        DataConstrChoice5               matlab.ui.control.DropDown
        AndOr5                          matlab.ui.control.DropDown
        DataConstrText4                 matlab.ui.control.EditField
        DataLogical4                    matlab.ui.control.DropDown
        DataConstrChoice4               matlab.ui.control.DropDown
        AndOr4                          matlab.ui.control.DropDown
        DataConstrText3                 matlab.ui.control.EditField
        DataLogical3                    matlab.ui.control.DropDown
        DataConstrChoice3               matlab.ui.control.DropDown
        AndOr3                          matlab.ui.control.DropDown
        DataConstrText2                 matlab.ui.control.EditField
        DataLogical2                    matlab.ui.control.DropDown
        DataConstrChoice2               matlab.ui.control.DropDown
        AndOr2                          matlab.ui.control.DropDown
        DataConstrText1                 matlab.ui.control.EditField
        DataLogical1                    matlab.ui.control.DropDown
        DataConstrChoice1               matlab.ui.control.DropDown
        ConstrainDataLabel              matlab.ui.control.Label
        LinkTimeLabel                   matlab.ui.control.Label
        DataTime                        matlab.ui.control.DropDown
        AddMoreDataButton               matlab.ui.control.Button
        Species7Label                   matlab.ui.control.Label
        DataSpecies7                    matlab.ui.control.DropDown
        Species6Label                   matlab.ui.control.Label
        DataSpecies6                    matlab.ui.control.DropDown
        Species5Label                   matlab.ui.control.Label
        DataSpecies5                    matlab.ui.control.DropDown
        Species4Label                   matlab.ui.control.Label
        DataSpecies4                    matlab.ui.control.DropDown
        Species3Label                   matlab.ui.control.Label
        DataSpecies3                    matlab.ui.control.DropDown
        Species2Label                   matlab.ui.control.Label
        DataSpecies2                    matlab.ui.control.DropDown
        Species1Label                   matlab.ui.control.Label
        DataSpecies1                    matlab.ui.control.DropDown
        LinkSpeciesLabel                matlab.ui.control.Label
        ChooseSSITModelLabel_2          matlab.ui.control.Label
        ChooseSSITModel_2               matlab.ui.control.DropDown
        PriorTypeDropDown               matlab.ui.control.DropDown
        PriorTypeDropDownLabel          matlab.ui.control.Label
        SetPriorButton                  matlab.ui.control.Button
        SuppressFSPExpansionfasterbutmaybelessaccurateCheckBox  matlab.ui.control.CheckBox
        GraphPosteriorDistributionsButton  matlab.ui.control.Button
        SettingsButton                  matlab.ui.control.Button
        ParameterFittingandUncertaintyQuantificationLabel  matlab.ui.control.Label
        FittingAlgorithmDropDown        matlab.ui.control.DropDown
        FittingAlgorithmDropDownLabel   matlab.ui.control.Label
        FitModelButton                  matlab.ui.control.StateButton
        LaunchMultiDataFittingToolButton  matlab.ui.control.Button
        ofmodelanddataLabel             matlab.ui.control.Label
        setdatatofitwithcurrentmodelLabel  matlab.ui.control.Label
        ParameterGuessesandFitsLabel    matlab.ui.control.Label
        selectallButton                 matlab.ui.control.Button
        ParEstFitTimesList              matlab.ui.control.ListBox
        TimesforFITTINGLabel            matlab.ui.control.Label
        DataLoadingPanel                matlab.ui.container.Panel
        ParEstLoadDataButton            matlab.ui.control.Button
        SpeciestoshowinplotsPanel       matlab.ui.container.Panel
        SpeciesForFitPlot               matlab.ui.control.ListBox
        FontSizeLabel_6                 matlab.ui.control.Label
        IncreaseFontSizeData            matlab.ui.control.Button
        DecreaseFontSizeData            matlab.ui.control.Button
        fit_parameters_table            matlab.ui.control.Table
        LoadandConstrainDataButton      matlab.ui.control.Button
        loadapreviouscombinationLabel   matlab.ui.control.Label
        LoadPreviousProjectButton       matlab.ui.control.Button
        DistortionTypeDropDown_2        matlab.ui.control.DropDown
        DistortionTypeDropDown_2Label   matlab.ui.control.Label
        FitResultsNameText              matlab.ui.control.Label
        FitResultsNameLabel             matlab.ui.control.Label
        RefreshResultsButton            matlab.ui.control.StateButton
        LoadPreviousResultsDropDown     matlab.ui.control.DropDown
        LoadPreviousResultsDropDownLabel  matlab.ui.control.Label
        RunFitsinBackgroundLabel        matlab.ui.control.Label
        FitinBackgroundmaclinuxonlyButton  matlab.ui.control.StateButton
        UpdatePDOParametersButton       matlab.ui.control.Button
        DistortionParameterGuessesandFitsLabel  matlab.ui.control.Label
        pdo_parameters_table            matlab.ui.control.Table
        ShowDistortionPlotButton_2      matlab.ui.control.Button
        SetDistortionParametersButton_2  matlab.ui.control.Button
        IncludeDataDistortionsinModelLabel  matlab.ui.control.Label
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    properties (Access = public)
        ReactionsTabOutputs = struct( ...
            'stoichMatrix', [], ... % Stores the stoichiometery matrix
            'parameters', [], ... % Stores the parameters
            'presetParameters', [], ... % Stores pre-set parameters from preset models
            'presetInputs', [], ... % Stores pre-set inputs from preset models
            'citations', [], ... % Stores citations
            'initialCondition', [], ... % Initial condition form preset model
            'loadParams', [], ... % Store selected parameter set form additional dropdown
            'paramVal', [],... % Store parameters for the load_parameter_popup_Callback
            'inputs', [], ... % Stores the inputs
            'propensities', [], ... % Stores the propensity functions
            'NStateModel', [], ... % Structure for N-State Model Building
            'modelInfo', []) % String for model information, to be copied into ModelAbout box

        StochasticSimulationTabOutputs = struct( ...
            'samples', []... % Stores the SSA results
            )

        FspTabOutputs = struct( ...
            'bounds', [], ... % Stores the bounds for the FSP calculation
            'fConstraints', [], ... % Stores the boundary function for the FSP
            'solutions', [], ... % Stores the FSP results
            'tOde',[],...% Stores the times for the ODE solutions
            'odeSolutions',[]...% Stores the ODE solutions
            )

        SensFspTabOutputs = struct( ...
            'solutions', []...  % FSP sensitivity results
            )

        DataLoadingAndFittingTabOutputs= struct( ...
            'boundIndex', [], ... % Stores the previous length of bounds to check if something needs to be deleted
            'S_Params', [],... % Stores the parameters function of the Sensitivity analysis has '.nm' for name and '.va' for value
            'S_Inputs', [],... % Stores the new values for the time-varying functions of the Sensitivity analysis has '.nm' for name and '.va' for value
            'S_logical', [],... % Stores a logical vector of which parameters and inputs are included in the Sensitivity analysis
            'S_Propens', [],... % Stores the propensity functions of the Sensitivity Analysis evaluated at the specified values
            'J_LogLk', [],...
            'dataTable', [],... % Table of data loaded by the user.
            'fittingOptions', [],...
            'dataMatrix', [],... % all data loaded by user in matrix format.
            'filteredDataMatrix', [],... % data matrix after filtering for chosen conditions.
            'dataTensor', [] ,... % data in tensor format (Time, x1, x2, x3)
            'fitResults', [] ,...
            'fitOptions', [] ,...    % options for fitting codes (structure depends on optimizer).
            'priorOptions', [], ...  % options for prior (structure depends on the prior type)
            'backgroundFitDir','BackgroundFits',...
            'backgroundFitFile','Untitled')


        MomentTabOutputs = struct(...
            'moments',[]... % stores the moment solutions
            )

        FIMTabOutputs = struct(...
            'FIMMatrices',[],...
            'FIMTimes',[],...
            'CellsPerTimePoint',[],...
            'NcOptimized',[],...
            'FIMPrior',[],...
            'PDOProperties',[],...
            'distortionOperator',[])

        SSITModel
        ModelFile
        UnsavedChanges = true
    end


    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            %% Set Paths
            app.UIFigure.Position(1:2) = [20 150];
            addpath(genpath('src'));
            clc
            initializeApp(app);
            app.SSITModel = SSIT('Empty');
            app.ModelUsePresetExampleTypeDropDown.Value = 'gene_expression';
            ModelUsePresetExampleTypeDropDownValueChanged(app);   % This runs the next drop down callback
            app.ModelDropDown.Value = 'M00_Poisson_Process.mat';
            ModelDropDownValueChanged(app);
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {666, 666};
                app.GridLayout.ColumnWidth = {'1x'};
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {12, '1x'};
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 2;
            end
        end

        % Value changed function: ModelAddReactionButton
        function ModelAddReactionButtonValueChanged(app, event)
            addReactionToReactionsTab(app);
            ModelReactionTableCellEdit(app, event)
            app.UnsavedChanges = true;
        end

        % Cell edit callback: ModelReactionTable
        function ModelReactionTableCellEdit(app, event)
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated.'; % This updates the text by the Update Model Button to notify the user that the model parameters have not been updated

            % When the main table is edited, it clears all graphs within the GUI
            cla(app.SsaTrajAxes);            % Empties the trajectories graph in the SSA tab
            cla(app.SsaHistAxes);           % Empties the histogram in the SSA tab
            cla(app.FspAxes);           % Empties the marginals in the FSP tab

            summarizeModelReactions(app.SpeciesTable.Data(:,1),app.ModelReactionTable.Data,app.ModelInputTable.Data,app.ReactionTextAxes)
            app.UnsavedChanges = true;
        end

        % Button pushed function: ModelUpdateButton
        function ModelUpdateButtonPushed(app, event)
            updateModel(app);
        end

        % Button pushed function: SsaRunButton
        function SsaRunButtonPushed(app, event)
            if app.UnsavedChanges
                disp('Model changes not saved -- updating model.')
                updateModel(app);
            end
            runSsa(app); % Runs SSA analysis
            runOde(app);
            % Runs the following functions to finalize plots and print times
            updateTimeSliderFsp(app)
            UpdatePlotsButtonPushed(app);
        end

        % Callback function: SsaNumSimToPlotField, SsaShowOdeCheckBox, 
        % ...and 2 other components
        function UpdatePlotsButtonPushed(app, event)
            plotSsaInGui(app); % Plots the SSA Results within the app
        end

        % Value changed function: ModelUsePresetExampleTypeDropDown
        function ModelUsePresetExampleTypeDropDownValueChanged(app, event)
            selectPresetExampleDropDown(app);
            % ModelDropDownValueChanged(app);
        end

        % Callback function
        function PrintTimesEditFieldValueChanged(app, event)
            % Updates the Time Slider for the graphs when the print times are changed in the SSA tab
            updateTimeSliderFsp(app,event)
        end

        % Button pushed function: FspRunButtom
        function FspRunButtomPushed(app, event)
            if app.UnsavedChanges
                disp('Model changes not saved -- updating model.')
                updateModel(app);
            end

            if isempty(app.FspConstraintTable.Data)
                FspDefaultButtonPushed(app);
            end
            runFsp(app);
            %             runOde(app);
            app.FspTimeSlider.Value = app.FspTimeSlider.Limits(2);
            updatePlotsInFsp(app);
        end

        % Button pushed function: FspDefaultButton
        function FspDefaultButtonPushed(app, event)
            if app.UnsavedChanges
                disp('Model changes not saved -- updating model.')
                updateModel(app);
            end
            makeDefaultConstraints(app);
            readConstraintsForAdaptiveFsp(app);
        end

        % Cell edit callback: FspConstraintTable
        function FspConstraintTableCellEdit(app, event)
            app.FspTabOutputs.stateSpace = [];
            readConstraintsForAdaptiveFsp(app);
        end

        % Callback function: FspTimeSlider, FspTimeSlider, 
        % ...and 2 other components
        function UpdatePlotsButton_2Pushed(app, event)
            updatePlotsInFsp(app);
        end

        % Callback function
        function timeSlider_2ValueChanged(app, event)
            %%% This callback is unused, remove it???
        end

        % Button pushed function: FspAddConstraintButton
        function FspAddConstraintButtonPushed(app, event)
            createNewConstraint(app);
            FspConstraintTableCellEdit(app); % Updates the bounds with the new added constraint
        end

        % Callback function
        function FspPrintTimesFieldValueChanged(app, event)
            updateTimeSliderFsp(app,event);
        end

        % Button pushed function: ModelSaveButton
        function ModelSaveButtonPushed(app, event)
            % Function saves the edits created to a Preset model or your own model
            % saveModelBP(app);
            dlgtitle = 'Choose File to Save or Append Model';
            [fileName,filePath] = uiputfile('*.mat',dlgtitle);

            dlgtitle = 'Save Model';
            dims = [1 50];  % [height width] of input field

            % Check if any variable is of class 'SSIT'
            if exist([filePath,'/',fileName],'file')
                info = whos('-file', [filePath,'/',fileName]);
                if any(strcmp({info.class}, 'SSIT'))
                    Models = {info(strcmp({info.class}, 'SSIT')).name};
                    k = length(Models);
                    defaultInput = {['Model',num2str(k+1)],'yes'};
                    prompt = {['Model Name (Existing Models:',Models{:}],'Append (yes/no)'};
                    saveSettings = inputdlg(prompt, dlgtitle, dims, defaultInput);
                    eval([saveSettings{1},'=app.SSITModel;'])
                    if strcmp(saveSettings{2},'yes')
                        save([filePath,'/',fileName],saveSettings{1},'-append')
                    else
                        save([filePath,'/',fileName],saveSettings{1})
                    end
                else
                    error('File exists and does not contain SSIT models.')
                end
                app.ModelFile.fileName = [filePath,'/',fileName];
                app.ModelFile.modelName = saveSettings{1};
            else
                defaultInput = {['Model',],'yes'};
                prompt = {'Model Name'};
                saveSettings = inputdlg(prompt, dlgtitle, dims, defaultInput);
                eval([saveSettings{1},'=app.SSITModel;'])
                save([filePath,'/',fileName],saveSettings{1});
                app.ModelFile.fileName = [filePath,'/',fileName];
                app.ModelFile.modelName = saveSettings{1};
            end
            app.FileModelLabel.Text = {['File: ',app.ModelFile.fileName];['Model: ',app.ModelFile.modelName]};


        end

        % Button pushed function: LoadPreviousProjectButton, 
        % ...and 1 other component
        function ModelLoadButtonPushed(app, event)
            app.ModelFile.propFileName = []; % Clear name of propensity functions.
            loadModelBP(app,event);
        end

        % Callback function
        function ButtonPushed(app, event)
            v = dir('Models');
            v = v(3:end);
            app.ModelUsePresetExampleTypeDropDown.Items = {v.name};
        end

        % Cell edit callback: ModelParameterTable
        function ModelParameterTableCellEdit(app, event)
            app.ReactionsTabOutputs.presetParameters = app.ModelParameterTable.Data(:,2);
            app.SSITModel.parameters = app.ModelParameterTable.Data;
            app.SensParameterSelectionTable.Data = app.SSITModel.parameters;
            app.fit_parameters_table.Data ={};
            for iPar = 1:size(app.SensParameterSelectionTable.Data,1)
                app.SensParameterSelectionTable.Data{iPar,3} = 'y';
                app.fit_parameters_table.Data(iPar,1) = app.SSITModel.parameters(iPar,1);
                app.fit_parameters_table.Data(iPar,2) = app.SSITModel.parameters(iPar,2);
            end
            
            % Any update or change to the Parameters table will result in a cleared graphs in the other tabs
            cla(app.SsaTrajAxes);
            cla(app.SsaHistAxes);
            cla(app.FspAxes);
        end

        % Cell edit callback: ModelInputTable
        function ModelInputTableCellEdit(app, event)
            app.ReactionsTabOutputs.presetInputs = app.ModelInputTable.Data(:,2);
            % Any update or change to the Inputs table will result in a cleared graphs in the other tabs
            cla(app.SsaTrajAxes);
            cla(app.SsaHistAxes);
            cla(app.FspAxes);
            updateModel(app)
            % selectSensitivityParametersTable(app); % Updates the Sensitivity Analysis Table
        end

        % Value changed function: ModelDropDown
        function ModelDropDownValueChanged(app, event)
            % This call back opens the selected model file.  If it is a
            % .mat file that contains SSIT models, then it populates a
            % dropdown list with the available models.  If there is just on
            % in the file, it opens that model.  
            % If the file is a .mat or .m script with different format, it
            % creates the SSIT model.
            
            fName = ['Models/',app.ModelUsePresetExampleTypeDropDown.Value,'/',app.ModelDropDown.Value];            
            app.ModelFile.propFileName = []; % Clear name of propensity functions.

            % Check if file contains SSIT model
            if strcmp(fName(end-2:end),'mat')
                info = whos('-file', fName);
                % Check if any variable is of class 'SSIT'
                if any(strcmp({info.class}, 'SSIT'))
                    app.ModelFile.fileName = fName;
                    app.ChooseSSITModel.Items = {info(strcmp({info.class}, 'SSIT')).name};
                    app.ChooseSSITModel.Visible = 'on';
                    app.ChooseSSITModelLabel.Visible = 'on';
                    % Load the mosel if there is just one.
                    if length(app.ChooseSSITModel.Items)==1
                        Model = load(fName,app.ChooseSSITModel.Items{1});
                        app.SSITModel = Model.(app.ChooseSSITModel.Items{1});
                        app.ModelFile.modelName = app.ChooseSSITModel.Items{1};
                        updateAppFromSSIT(app);
                    end
                    return
                end
            end
            
            % If no SSIT Model, call function to create SSIT model.
            app.ChooseSSITModel.Visible = 'off';
            app.ChooseSSITModelLabel.Visible = 'off';
            updateModelswithinDropDown(app);
        end

        % Callback function
        function ModelEmptyParametersandInputsButtonPushed(app, event)
            % This clears all of the current parameter values within the app
            ModelUpdateButtonPushed(app);
            ModelParameterTableCellEdit(app);
            ModelInputTableCellEdit(app);
        end

        % Button pushed function: SsaExportFiguresButton
        function SsaExportFiguresButtonPushed(app, event)
            exportBothFiguresSsa(app,1,1); % This exports figures into a Matlab figure
        end

        % Button pushed function: SsaExportTrajectoriesButton
        function SsaExportTrajectoriesButtonPushed(app, event)
            exportBothFiguresSsa(app,1,0); % This exports figures into a Matlab figure
        end

        % Button pushed function: SsaExportHistogramButton
        function SsaExportHistogramButtonPushed(app, event)
            exportBothFiguresSsa(app,0,1); % This exports figures into a Matlab figure
        end

        % Callback function
        function ModelCitationforPresetExamplesTextAreaValueChanged(app, event)
            %             value = app.ModelCitationforPresetExamplesTextArea.Value;
            %%% This text area cannot be changed, so I dont think we need this!
        end

        % Button pushed function: FspPlotMarginalsButton
        function FspPlotMarginalsButtonPushed(app, event)
            makeMarginalsFsp(app);
            % This creates the marginal plots for FSP from the function cited
        end

        % Button pushed function: FspPlotMarginalsOverTimeButton
        function FspPlotMarginalsOverTimeButtonPushed(app, event)
            makeTimeMarginalsFsp(app); % This creates time varying marginals in a matlab figure
        end

        % Button pushed function: FspMeanVarPlotButton
        function FspMeanVarPlotButtonPushed(app, event)
            makeMeanAndVarianceFsp(app); % Creates mean and variance plots in a matlab figure
        end

        % Value changed function: FspContourCheckBox
        function FspContourCheckBoxValueChanged(app, event)
            value = app.FspContourCheckBox.Value; % This function disables the Mesh plot if the contour plot is selected
            if value == 1
                app.FspMeshCheckBox.Value = 0;
                app.FspMeshCheckBox.Enable = 'off';
            elseif value == 0
                app.FspMeshCheckBox.Enable = 'on';
            end

        end

        % Value changed function: FspMeshCheckBox
        function FspMeshCheckBoxValueChanged(app, event)
            value = app.FspMeshCheckBox.Value; % This function disables the contour plot if the mesh plot is selected
            if value == 1
                app.FspContourCheckBox.Value = 0;
                app.FspContourCheckBox.Enable = 'off';
            elseif value == 0
                app.FspContourCheckBox.Enable = 'on';
            end
        end

        % Button pushed function: PlotJointDistributionsButton
        function PlotJointDistributionsButtonPushed(app, event)
            makeJointDistributionsFsp(app); % Creates the joint distribution as a matlab figure
        end

        % Callback function
        function SelectParametersDropDownValueChanged(app, event)
            % For the sensitivity tab %%% Can I remove this? No longer in use
            value = app.SelectParametersDropDown.Value;
            st = char(app.ParametersSelectedTextArea.Value);
            %             keyboard
            if ~isempty(st)
                mynewvalue = [st,',',value];
            elseif isempty(st)
                mynewvalue = value;
            end

            app.ParametersSelectedTextArea.Value = mynewvalue;

        end

        % Callback function
        function SelectAllParametersCheckBoxValueChanged(app, event)
            % For the sensitivity tab %%% Can I remove this? No longer in use
            value = app.SelectAllParametersCheckBox.Value;

            if  isequal(value,1)
                char_vec = char(app.SelectParametersDropDown.Items);
                mynewvalue = char_vec(1,:);
                for i = 2:length(char_vec)
                    mynewvalue = [mynewvalue,',',char_vec(i,:)];
                end
                app.ParametersSelectedTextArea.Value = mynewvalue;
            else
                return
            end

        end

        % Callback function
        function ClearSelectedParametersButtonPushed(app, event)
            app.ParametersSelectedTextArea.Value = '';
        end

        % Cell edit callback: SensParameterSelectionTable
        function SensParameterSelectionTableCellEdit(app, event)
            editSelectParametersTable(app);
        end

        % Callback function
        function SensInputTableCellEdit(app, event)
            editSelectParametersTable(app);
        end

        % Value changed function: FspPrintTimesField, 
        % ...and 3 other components
        function SensPrintTimesEditFieldValueChanged(app, event)
            updateTimeSliderFsp(app,event)
        end

        % Callback function
        function TimePointsEditFieldValueChanged(app, event)
            FIMTableEdit(app);
        end

        % Callback function
        function PerfectCheckBoxValueChanged(app, event)
            value = app.PerfectCheckBox.Value;
            if value == 1
                app.ofBinsEditField.Enable = 'off';
                app.BinEdgesEditField.Enable = 'off';
                app.UniformCheckBox.Value = 0;
                app.SpecifiedCheckBox.Value = 0;
            end
        end

        % Callback function
        function UniformCheckBoxValueChanged(app, event)
            value = app.UniformCheckBox.Value;
            if value == 1
                app.ofBinsEditField.Enable = 'on';
                app.BinEdgesEditField.Enable = 'off';
                app.PerfectCheckBox.Value = 0;
                app.SpecifiedCheckBox.Value = 0;
            end
        end

        % Callback function
        function SpecifiedCheckBoxValueChanged(app, event)
            value = app.SpecifiedCheckBox.Value;
            if value == 1
                app.ofBinsEditField.Enable = 'off';
                app.BinEdgesEditField.Enable = 'on';
                app.PerfectCheckBox.Value = 0;
                app.UniformCheckBox.Value = 0;
            end
        end

        % Callback function
        function ImageProcessingErrorsDropDownValueChanged(app, event)
            x1TabChange(app);
        end

        % Callback function
        function ImageProcessingErrorsDropDown_4ValueChanged(app, event)
            x2TabChange(app);
        end

        % Callback function
        function ImageProcessingErrorsDropDown_5ValueChanged(app, event)
            x3TabChange(app);
        end

        % Callback function
        function UniformProcessingButtonPushed(app, event)
            UniformProcessingX1(app);
        end

        % Callback function
        function UniformProcessingButton_2Pushed(app, event)
            UniformProcessingX2(app);
        end

        % Callback function
        function UniformProcessingButton_3Pushed(app, event)
            UniformProcessingX3(app);
        end

        % Callback function
        function ButtonPushed2(app, event)
            StoreCEquation(app);
        end

        % Callback function
        function LoadandPlotDansDataButtonPushed(app, event)
            Update_Dans_Plots(app);
        end

        % Callback function
        function UpdateModelandSolveButtonPushed(app, event)
            app.ModelParameterTable.Data=app.tab_pars_Dan.Data;
            app.ModelInputTable.Data=app.tab_inp_Dan.Data;
            ModelParameterTableCellEdit(app);
            ModelInputTableCellEdit(app);
            FspRunButtomPushed(app);
            LoadandPlotDansDataButtonPushed(app);
        end

        % Callback function
        function tab_pars_DanCellEdit(app, event)
            app.ModelParameterTable.Data=app.tab_pars_Dan.Data;
            app.ModelInputTable.Data=app.tab_inp_Dan.Data;
            ModelParameterTableCellEdit(app);
            ModelInputTableCellEdit(app);
        end

        % Callback function
        function SlowFitAutomaticButtonValueChanged(app, event)
            random_greedy_fit(app);
        end

        % Callback function
        function DistributionTypeButtonGroupSelectionChanged(app, event)
            Update_Dans_Plots(app);
        end

        % Callback function
        function LoadPreviousModelButtonPushed(app, event)
            ssit.parest.LoadOldProject(app);
            app.SaveCurrentProjectButton.Enable=1;
            LoadandConstrainDataButtonPushed(app, event);
        end

        % Callback function
        function SaveCurrentParameterSetButtonPushed(app, event)
            Update_Dans_Plots(app);
            [~,~,par_name]=SaveModelBP(app,event,app.NameForModelSavingEditField.Value);
            app.SaveParSetName.Text = ['saved as ',par_name];
        end

        % Button pushed function: ParEstLoadDataButton
        function ParEstLoadDataButtonPushed(app, event)
            app.DataLoadingAndFittingTabOutputs.dataTensor =[];
            loadDataFromFile(app);
            % app.LinkDatandModelButton.Enable = 1;
            % marginalizeDataGui(app);
            selectallButtonPushed(app, event)
            % LoadandConstrainDataButtonPushed(app, event)
            % app.SaveCurrentProjectButton.Enable=1;
        end

        % Callback function
        function x1_data_CheckBoxValueChanged(app, event)
            defineDataInTermsOfModel(app);
        end

        % Callback function
        function ShowPlotsButtonPushed(app, event)
            makeSeparatePlotOfData(app);
        end

        % Button pushed function: LoadandConstrainDataButton
        function LoadandConstrainDataButtonPushed(app, event)
            parseDataConstraints(app)
            % ssit.parest.updateModelSolveAndCompareToData(app);            
            % makeSeparatePlotOfData(app);
            % figure(app.UIFigure);
        end

        % Callback function
        function SaveCurrentParameterSetButton_2Pushed(app, event)
            updateModelSolveAndCompareToData(app);
            %         app.name_of_fit_save_model.Value
            [~,~,par_name]=SaveModelBP(app,event,app.name_of_fit_save_model.Value);
            app.SaveParSetName_2.Text = ['saved as ',par_name];
        end

        % Value changed function: FitModelButton
        function FitModelButtonValueChanged(app, event)
            % fitFileStr = ['Results_',app.FitResultsNameText.Text,datestr(now,'yyyy_mm_dd_HH_MM_SS'),'.mat'];

            fitAlgorithm = app.FittingAlgorithmDropDown.Value;
            try
                fitOptions = app.DataLoadingAndFittingTabOutputs.fitOptions.props;
            catch
                fitOptions =[];
            end

            fields = fieldnames(fitOptions);
            for ifield = 1:length(fields)
                field = fields{ifield};
                if isstring(fitOptions.(field))||ischar(fitOptions.(field))
                    if strcmp(fitOptions.(field)(1),'@')
                        fitOptions.(field) = eval(fitOptions.(field));
                    end
                end
            end

            app.SSITModel.fittingOptions.modelVarsToFit = find(strcmp(app.fit_parameters_table.Data(:,3),'y'));

            [pars,likelihood,otherResults,app.SSITModel] = app.SSITModel.maximizeLikelihood([],fitOptions,fitAlgorithm);

            updateAppFromSSIT(app,false,false);

            % ssit.parest.fitModel2Data(app);
            % if strcmp(app.FittingAlgorithmDropDown.Value,'Metropolis Hastings')
            %     set(app.GraphPosteriorDistributionsButton,'Enable','on');
            % else
            %     set(app.GraphPosteriorDistributionsButton,'Enable','off');
            % end
            % ssit.parest.SaveCurrentProject(app,app.DataLoadingAndFittingTabOutputs.backgroundFitDir,fitFileStr);

        end

        % Callback function
        function FilteronConditionCheckBoxValueChanged(app, event)
            userSelectCondition(app);
        end

        % Value changed function: FitinBackgroundmaclinuxonlyButton
        function FitinBackgroundmaclinuxonlyButtonValueChanged(app, event)
            if ispc
                warndlg('Background fitting not yet supported on Windows.','Background Warning');
                return
            end
            
            fitResultsFileStr = ['Results_',app.FitResultsNameText.Text,datestr(now,'yyyy_mm_dd_HH_MM_SS'),'.mat'];
            fitDataFileStr = ['Data_',app.FitResultsNameText.Text,'.mat'];
            fitFileName = [app.DataLoadingAndFittingTabOutputs.backgroundFitDir,'/',fitDataFileStr];
            resultName =  [app.DataLoadingAndFittingTabOutputs.backgroundFitDir,'/',fitResultsFileStr];
            ssit.parest.fitModel2Data(app,fitFileName);
            ssit.parest.runBackgroundFit(fitFileName,resultName);
        end

        % Value changed function: SSAXmaxEditField
        function SSAXmaxEditFieldValueChanged(app, event)
            value = app.SSAXmaxEditField.Value;
            app.SsaTrajAxes.XLim(2) = value;
        end

        % Value changed function: SSAYmaxEditField
        function SSAYmaxEditFieldValueChanged(app, event)
            value = app.SSAYmaxEditField.Value;
            app.SsaTrajAxes.YLim(2) = value;
        end

        % Value changed function: SSAXminEditField
        function SSAXminEditFieldValueChanged(app, event)
            value = app.SSAXminEditField.Value;
            app.SsaTrajAxes.XLim(1) = value;
        end

        % Callback function
        function SSAYminEditFieldValueChanged(app, event)
            value = app.SSAYminEditField.Value;
            app.SsaTrajAxes.YLim(1) = value;
        end

        % Value changed function: SsaNonParallelCheckBox
        function SsaNonParallelCheckBoxValueChanged(app, event)
            if app.SsaNonParallelCheckBox.Value
                app.SsaParallelCheckBox.Value = 0;
            end
        end

        % Value changed function: SsaParallelCheckBox
        function SsaParallelCheckBoxValueChanged(app, event)
            if app.SsaParallelCheckBox.Value
                app.SsaNonParallelCheckBox.Value = 0;
            end
        end

        % Value changed function: FSPXminEditField
        function FSPXminEditFieldValueChanged(app, event)
            value = app.FSPXminEditField.Value;
            app.FspAxes.XLim(1) = value;
        end

        % Value changed function: FSPXmaxEditField
        function FSPXmaxEditFieldValueChanged(app, event)
            value = app.FSPXmaxEditField.Value;
            app.FspAxes.XLim(2) = value;
        end

        % Value changed function: FSPYminEditField
        function FSPYminEditFieldValueChanged(app, event)
            value = app.FSPYminEditField.Value;
            app.FspAxes.YLim(1) = value;
        end

        % Value changed function: FSPYmaxEditField
        function FSPYmaxEditFieldValueChanged(app, event)
            value = app.FSPYmaxEditField.Value;
            app.FspAxes.YLim(2) = value;
        end

        % Callback function
        function SSA_hist_XminEditFieldValueChanged(app, event)

        end

        % Callback function
        function SSA_hist_XmaxEditFieldValueChanged(app, event)

        end

        % Callback function
        function SSA_hist_YminEditFieldValueChanged(app, event)

        end

        % Value changed function: SSAYminEditField, 
        % ...and 4 other components
        function SSA_hist_YmaxEditFieldValueChanged(app, event)
            app.SsaHistAxes.YLim = [app.SSA_hist_YminEditField.Value,app.SSA_hist_YmaxEditField.Value];
            app.SsaHistAxes.XLim = [app.SSA_hist_XminEditField.Value, app.SSA_hist_XmaxEditField.Value];
            app.SsaTrajAxes.YLim = [app.SSAYminEditField.Value,app.SSAYmaxEditField.Value];
            app.SsaTrajAxes.XLim = [app.SSAXminEditField.Value, app.SSAXmaxEditField.Value];
        end

        % Button pushed function: SensRunButton
        function SensRunButtonPushed(app, event)
            if app.UnsavedChanges
                disp('Model changes not saved -- updating model.')
                updateModel(app);
            end
            if isempty(app.FspConstraintTable.Data)
                FspDefaultButtonPushed(app);
            end
            runSensitivity(app);
        end

        % Value changed function: SensPlotTimeSlider, SpeciesForSensPlot
        function SensPlotTimeSliderValueChanged(app, event)
            updatePlotsInSensFsp(app);
        end

        % Value changed function: SensParDropDown
        function SensParDropDownValueChanged(app, event)
            updatePlotsInSensFsp(app);
        end

        % Button pushed function: FspApproximateSteadyStateButton
        function FspApproximateSteadyStateButtonPushed(app, event)
            app.FspAutoExpandCheckBox.Value = 0;
            runFsp(app,'steady_state');
            updatePlotsInFsp(app);
            figure(app.UIFigure);
        end

        % Button pushed function: SsaExportExcelButton
        function SsaExportExcelButtonPushed(app, event)
            exportSsaData(app);
        end

        % Button pushed function: IncreaseFontSizeData, 
        % ...and 5 other components
        function IncreaseFontRxnPushed(app, event)
            increaseGlobalFontSize(app);
        end

        % Button pushed function: DecreaseFontSizeData, 
        % ...and 5 other components
        function DecreaseFontRxnPushed(app, event)
            decreaseGlobalFontSize(app);
        end

        % Callback function
        function incr(app, event)

        end

        % Callback function
        function SensMarginalPlotProbButtonPushed(app, event)
            plotMarginalinSensTab(app);
        end

        % Callback function
        function SensMarginalPlotDerivativeButtonPushed(app, event)
            plotSensinSensTab(app);
        end

        % Callback function
        function PlotMarginalsButtonPushed(app, event)
            makeTimeMarginalsSensTab(app);
        end

        % Callback function
        function PlotSensitivityButtonPushed(app, event)
            makeTimeSensitivitySensTab(app);
        end

        % Callback function
        function PlotJointDistributionsButton_2Pushed(app, event)
            makeJointDistributionsSens(app);
        end

        % Callback function
        function PlotMeanandVarianceButton_2Pushed(app, event)
            makeMeanAndVarianceSens(app);
        end

        % Button pushed function: SettingsButton
        function SettingsButtonPushed(app, event)
            if isempty(app.DataLoadingAndFittingTabOutputs.fitOptions)
                ssit.parest.changeFitType(app);
            end
            ssit.parest.PropEditor(app.DataLoadingAndFittingTabOutputs.fitOptions,'props');
        end

        % Value changed function: FittingAlgorithmDropDown
        function FittingAlgorithmDropDownValueChanged(app, event)
            ssit.parest.changeFitType(app);
        end

        % Callback function
        function LoadFitWithAlternateNameButtonValueChanged(app, event)
            ssit.parest.loadBackgroundFits(app);
        end

        % Callback function
        function RunMomentsButtonPushed(app, event)
            runMoments(app);
            plotMomentsInGui(app);
        end

        % Callback function
        function UpdatePlotButtonPushed(app, event)
            plotMomentsInGui(app);
        end

        % Button pushed function: GraphPosteriorDistributionsButton
        function GraphPosteriorDistributionsButtonPushed(app, event)
            ssit.parest.FittingGraphs(app.DataLoadingAndFittingTabOutputs,app.ReactionsTabOutputs.parameters,'props');
        end

        % Callback function
        function NameTableCellEdit(app, event)
            editCheckBoxNames(app);
        end

        % Callback function
        function LinkDataandModelButtonPushed(app, event)
            marginalizeDataGui(app);
            selectallButtonPushed(app, event);
            LoadandConstrainDataButtonPushed(app);
        end

        % Value changed function: ParEstFitTimesList
        function ParEstFitTimesListValueChanged(app, event)
            values = app.ParEstFitTimesList.Value;
            fitTimes = zeros(1,length(values));
            for i=1:length(values)
                fitTimes(i) = eval(values{i});
            end
            app.DataLoadingAndFittingTabOutputs.fittingOptions.fit_times = fitTimes;
            
            items = app.ParEstFitTimesList.Items;
            dataTimes = zeros(1,length(items));
            for i=1:length(items)
                dataTimes(i) = eval(items{i});
            end
            app.DataLoadingAndFittingTabOutputs.fittingOptions.dataTimes = dataTimes;

            maxFitTime = max(fitTimes);
            allTimes = sort(unique([(fitTimes),(str2num(app.FspPrintTimesField.Value))]));
            allTimes = allTimes(allTimes<=maxFitTime);
            app.FspPrintTimesField.Value = ['[',num2str(allTimes),']'];

            app.SSITModel.fittingOptions.timesToFit = zeros(1,length(app.ParEstFitTimesList.Items),'logical');
            app.SSITModel.fittingOptions.timesToFit(app.ParEstFitTimesList.ValueIndex) = true;
        end

        % Button pushed function: SetPriorButton
        function SetPriorButtonPushed(app, event)
            ssit.parest.PropEditor(app.DataLoadingAndFittingTabOutputs.priorOptions,'props');
        end

        % Value changed function: PriorTypeDropDown
        function PriorTypeDropDownValueChanged(app, event)
            ssit.parest.SetPriors(app);
        end

        % Button pushed function: selectallButton
        function selectallButtonPushed(app, event)
            app.ParEstFitTimesList.Value = app.ParEstFitTimesList.Items;
            % ParEstFitTimesListValueChanged(app, event);
        end

        % Value changed function: RefreshResultsButton
        function RefreshResultsButtonValueChanged(app, event)
            GG = dir(app.DataLoadingAndFittingTabOutputs.backgroundFitDir);
            J = contains({GG.name},'Results')&contains({GG.name},'.mat');
            fNames = {GG(J).name};
            app.LoadPreviousResultsDropDown.Items = {};
            app.LoadPreviousResultsDropDown.Items{1} = 'Select';
            app.LoadPreviousResultsDropDown.Items{2} = 'Best';
            app.DataLoadingAndFittingTabOutputs.completedFits = {};
            if isempty(fNames)
                warning('No Previous Fits in this Directory');
                return
            end
            for i=1:length(fNames)
                % This needs to be fixed to work with the merged models.
                load(['',app.DataLoadingAndFittingTabOutputs.backgroundFitDir,'/',fNames{i},''],'Loc_app_str')
                app.LoadPreviousResultsDropDown.Items{i+2} = [fNames{i}(1:end-4),...
                    ' log(L) = ',sprintf('%0.8g',Loc_app_str.DataLoadingAndFittingTabOutputs.J_LogLk)];
                app.DataLoadingAndFittingTabOutputs.completedFits{i+2,1} = fNames{i};
                app.DataLoadingAndFittingTabOutputs.completedFits{i+2,2} = Loc_app_str.DataLoadingAndFittingTabOutputs.J_LogLk;
            end
            maxL = max([app.DataLoadingAndFittingTabOutputs.completedFits{2:end,2}]);
            app.LoadPreviousResultsDropDown.Items{2} = ['Select Best: log(L) =',sprintf('%0.8g',maxL)];

        end

        % Value changed function: LoadPreviousResultsDropDown
        function LoadPreviousResultsDropDownValueChanged(app, event)
            J = find(strcmp(app.LoadPreviousResultsDropDown.Items,app.LoadPreviousResultsDropDown.Value));

            if J==2
                [~,j] = max([app.DataLoadingAndFittingTabOutputs.completedFits{2:end,2}]);
                J = j+2;
            end
            choice = app.DataLoadingAndFittingTabOutputs.completedFits{J,1};
            ssit.parest.loadBackgroundFits(app,choice)

        end

        % Callback function
        function InitializeButtonPushed(app, event)
            ssit.parest.ModelMergeInitiate(app);
            app.AddButton.Enable = 1;
        end

        % Callback function
        function AddButtonPushed(app, event)
            ssit.parest.ModelMergeAdd(app);
            app.MergeButton.Enable = 1;
        end

        % Callback function
        function MergeButtonPushed(app, event)
            ssit.parest.ModelMergeMerge(app);
            app.MergedModelDropDown.Enable = 1;
        end

        % Button pushed function: LoadSBMLModelButton
        function LoadSBMLModelButtonPushed(app, event)
            loadModelFromSBML(app)
            ModelUpdateButtonPushed(app);
        end

        % Callback function
        function SaveCurrentProjectButtonPushed(app, event)
            ssit.parest.SaveCurrentProject(app)
        end

        % Callback function
        function MergedModelDropDownValueChanged(app, event)
            ssit.parest.ChangeModelForPlot(app)
            LoadandConstrainDataButtonPushed(app)
        end

        % Callback function
        function ResetButtonPushed(app, event)
            try
                app.DataLoadingAndFittingTabOutputs = rmfield(app.DataLoadingAndFittingTabOutputs,'ModelMerge');
            catch
            end
            app.fit_parameters_table.Data = {};
            app.fit_parameters_table.Data(:,1:2) = app.ModelParameterTable.Data;
            app.fit_parameters_table.Data(:,3) = {'y'};
            app.MergeModelConstraints.Data = {};
            app.MergedModelDropDown.Enable = 0;
            app.AddButton.Enable = 0;
            app.MergeButton.Enable  = 0;
            app.ResetButton.Enable  = 0;
            app.ModelList.Text = 'No merged models';

        end

        % Callback function
        function MergeModelConstraintsCellEdit(app, event)
            app.ModelList.Text = app.DataLoadingAndFittingTabOutputs.ModelMerge.FileName;
            app.ModelList.Text(end+1) = {'Model not yet merged! Press the merge button.'};
        end

        % Callback function
        function SelectFolderandFileforBackgroundFittingButtonValueChanged(app, event)
            [FN,PN] = uiputfile('*.mat','Choose or Create file for Fitting Results','Untitled.mat');
            app.DataLoadingAndFittingTabOutputs.backgroundFitDir=PN;
            app.DataLoadingAndFittingTabOutputs.backgroundFitFile=FN;
        end

        % Button pushed function: CreateNewNStateModelButton
        function CreateNewNStateModelButtonPushed(app, event)
            NStateModelMaker(app);
        end

        % Callback function
        function OpenFitPlotsButtonPushed(app, event)
            makeSeparatePlotOfData(app);
        end

        % Callback function: FIMMetricorParameterDropDown, 
        % ...and 1 other component
        function ComputeFIMandPlotInformationvsTimeButtonPushed(app, event)
            if isempty(app.FspConstraintTable.Data)
                FspDefaultButtonPushed(app);
            end
            runComputeFim(app,strcmp(app.PlotStlyeDropDown.Value,'New Information vs. time'));
        end

        % Button pushed function: 
        % ManuallyAllocateMeasurementsperTimePointButton
        function ManuallyAllocateMeasurementsperTimePointButtonPushed(app, event)
            FIMManuallyAllocateMeasurements(app)
        end

        % Callback function: EstimateMLEUncertaintyButton, 
        % ...and 3 other components
        function EstimateMLEUncertaintyButtonPushed(app, event)
            FIMEstimateUncertainty(app)
        end

        % Button pushed function: OptimizeButton_2
        function OptimizeButton_2Pushed(app, event)
            FIMOptimize(app)
        end

        % Callback function
        function ListofMeasurementTimesEditFieldValueChanged(app, event)
            updateTimeSliderFsp(app,event)
        end

        % Callback function
        function PlotRedundancyvsTimeButtonPushed(app, event)

        end

        % Button pushed function: SpecifyPriorButton
        function SpecifyPriorButtonPushed(app, event)
            FIMSpecifyPrior(app)
        end

        % Callback function
        function LoadSavedPriorButtonPushed(app, event)
            FIMLoadPrior(app)
        end

        % Button pushed function: AddProbabilisticDistortionEffectsButton
        function AddProbabilisticDistortionEffectsButtonPushed(app, event)
            FIMLaunchDistortion(app)
        end

        % Value changed function: ModelUncertaintyDropDown
        function ModelUncertaintyDropDownValueChanged(app, event)
            app.FIMTabOutputs.FIMMatrices=[];
            if strcmp(app.ModelUncertaintyDropDown.Value,'MC Sample Over Prior')
                app.SpecifyPriorButton.Enable = 1;
                app.FIMNumMC.Enable = 1;
            else
                app.SpecifyPriorButton.Enable = 0;
                app.FIMNumMC.Enable = 0;
            end
        end

        % Button pushed function: LaunchMultiDataFittingToolButton
        function LaunchMultiDataFittingToolButtonPushed(app, event)
            SSITMergeModels(app)
        end

        % Value changed function: DistortionTypeDropDown, 
        % ...and 1 other component
        function DistortionTypeDropDownValueChanged(app, event)
            app.DistortionTypeDropDown.Value = event.Source.Value;
            app.DistortionTypeDropDown_2.Value = event.Source.Value;
            ssit.pdo.changePdoType(app)
            try 
                UpdatePDOParametersButtonPushed(app)
            catch
            end
            ssit.pdo.generatePDO(app);
            
            % Reset prior to none.
            app.PriorTypeDropDown.Value = 'None';
            ssit.parest.SetPriors(app);
        end

        % Button pushed function: SetDistortionParametersButton, 
        % ...and 1 other component
        function SetDistortionParametersButtonPushed(app, event)
            disp('Please use the GUI to enter the distortion operator parameters.')
            ssit.parest.PropEditor(app.FIMTabOutputs.PDOProperties,'props',{'Parameter','Value'},0);
        end

        % Button pushed function: ShowDistortionPlotButton, 
        % ...and 1 other component
        function ShowDistortionPlotButtonPushed(app, event)
            ssit.pdo.showPdoPlot(app)
        end

        % Button pushed function: UpdatePDOParametersButton
        function UpdatePDOParametersButtonPushed(app, event)
            app.pdo_parameters_table.Data = {};
            if isnumeric(app.FIMTabOutputs.PDOProperties.props.ParameterGuess)
                paramsPDO = app.FIMTabOutputs.PDOProperties.props.ParameterGuess;
            else
                paramsPDO = eval(app.FIMTabOutputs.PDOProperties.props.ParameterGuess);
            end
            for i = 1:length(paramsPDO)
                app.pdo_parameters_table.Data{end+1,1} = ['p_PDO_',num2str(i)];
                app.pdo_parameters_table.Data{end,2} = paramsPDO(i);
                app.pdo_parameters_table.Data{end,3} = 'n';
            end         
        end

        % Value changed function: HoldOnCheckBox
        function HoldOnCheckBoxValueChanged(app, event)
            if app.HoldOnCheckBox.Value
                hold(app.plotFIMvsTime,"on");
            else
                hold(app.plotFIMvsTime,"off");
            end
        end

        % Button pushed function: LaunchFSPModelReductionToolButton
        function LaunchFSPModelReductionToolButtonPushed(app, event)
            FSPModelReducer(app)
        end

        % Value changed function: FspInitCondField, SensInitCondField, 
        % ...and 1 other component
        function SsaInitCondFieldValueChanged(app, event)
            value = event.Source.Value;
            app.SsaInitCondField.Value=value;
            app.FspInitCondField.Value=value;
            app.SensInitCondField.Value=value;
            app.FIMTabOutputs.CellsPerTimePoint=[];
            app.FIMTabOutputs.FIMMatrices=[];
            app.FIMTabOutputs.NcOptimized=[];
            app.SensFspTabOutputs.solutions=[];
        end

        % Value changed function: PlotStlyeDropDown
        function PlotStlyeDropDownValueChanged(app, event)
            pars = app.ReactionsTabOutputs.parameters;
            switch(app.PlotStlyeDropDown.Value)
                case 'Information vs. time'
                    FIMMetrics = {'Trace'};
%                     FIMMetrics(end+1:end+size(pars,1)) = pars(:,1);
                    app.FIMMetricorParameterDropDown.Items = FIMMetrics;
                    app.FIMMetricorParameterDropDown.Value = 'Trace';
                case 'New Information vs. time'
                    FIMMetrics = {'Determinant','Smallest Eigenvalue','Trace'};
                    FIMMetrics(end+1:end+size(pars,1)) = pars(:,1);
                    app.FIMMetricorParameterDropDown.Items = FIMMetrics;
                    app.FIMMetricorParameterDropDown.Value = 'Determinant';
            end
            
        end

        % Button pushed function: 
        % ExportFSPDatatoWorkspaceForManualPlotsButton
        function ExportFSPDatatoWorkspaceForManualPlotsButtonPushed(app, event)
            exportFSPResults(app);
        end

        % Button pushed function: 
        % ExportSensitivityDatatoWorkspaceForManualPlotsButton
        function ExportSensitivityDatatoWorkspaceForManualPlotsButtonPushed(app, event)
            exportSensResults(app);
        end

        % Value changed function: SpeciestoShowListBox
        function SpeciestoShowListBoxValueChanged(app, event)
            plotSsaInGui(app)
        end

        % Value changed function: AddSpeciesButton
        function AddSpeciesButtonValueChanged(app, event)
            prompt = {'Species name:','Initial value:'};
            dlgtitle = 'New Species';
            dims = [1 40];  % [height width] of input field
            defaultInput = {'x1','0'};
            newSpecies = inputdlg(prompt, dlgtitle, dims, defaultInput);
            app.SSITModel=app.SSITModel.addSpecies(newSpecies{1},round(eval(newSpecies{2})));
            app.SpeciesTable.Data(end+1,1) = newSpecies(1);
            app.SpeciesTable.Data(end,2) = {eval(newSpecies{2})};
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated.'; % This updates the text by the Update Model Button to notify the user that the model parameters have not been updated
            app.UnsavedChanges = true;

        end

        % Value changed function: AddInputButton
        function AddInputButtonValueChanged(app, event)
            prompt = {'Signal name:','Signal expression:'};
            dlgtitle = 'New Input Signal';
            dims = [1 40];  % [height width] of input field
            nSig = size(app.ModelInputTable.Data,1)+1;
            defaultInput = {['I',num2str(nSig)],'A*sin(Omega*t)'};
            newSignal = inputdlg(prompt, dlgtitle, dims, defaultInput);
           
            app.ModelInputTable.Data(nSig,1) = newSignal(1);
            app.ModelInputTable.Data(nSig,2) = newSignal(2);
            app.SSITModel.inputExpressions(end+1,1) = newSignal(1);
            app.SSITModel.inputExpressions(end,2) = newSignal(2);            
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated!';
            app.DeleteInputDropDown.Enable = "on";
            app.DeleteInputDropDown.Items(end+1) = app.ModelInputTable.Data(nSig,1);
            app.UnsavedChanges = true;
        end

        % Value changed function: ModelAbout
        function ModelAboutValueChanged(app, event)
            % Update information in model when next saved.
            app.SSITModel.description = app.ModelAbout.Value;
        end

        % Value changed function: ChooseSSITModel
        function ChooseSSITModelValueChanged(app, event)
            value = app.ChooseSSITModel.Value;
            Model = load(app.ModelFile.fileName,app.ChooseSSITModel.Value);
            app.SSITModel = Model.(app.ChooseSSITModel.Value);
            app.ModelFile.modelName = app.ChooseSSITModel.Value;
            app.ModelFile.propFileName = []; % Clear name of propensity functions.
            updateAppFromSSIT(app)
        end

        % Cell edit callback: SpeciesTable
        function SpeciesTableCellEdit(app, event)
            for i=1:size(app.SpeciesTable,1)
                app.SSITModel.initialCondition(i) = app.SpeciesTable.Data{i,2};
            end
            app.SsaInitCondField.Value = append('[',num2str(app.SSITModel.initialCondition'),']');
            app.FspInitCondField.Value = append('[',num2str(app.SSITModel.initialCondition'),']');
            app.SensInitCondField.Value = append('[',num2str(app.SSITModel.initialCondition'),']');

        end

        % Value changed function: DeleteReactionDropDown
        function DeleteReactionDropDownValueChanged(app, event)
            value = app.DeleteReactionDropDown.Value;
            J = ones(size(app.ModelReactionTable.Data,1),1,'logical');
            iRxn = eval(value(2:end));
            J(iRxn) = 0;
            app.ModelReactionTable.Data = app.ModelReactionTable.Data(J,:);
            J = [true;J];
            app.DeleteReactionDropDown.Items = {'Select'};
            for iRxn = 1:size(app.ModelReactionTable.Data,1)
                app.ModelReactionTable.Data{iRxn,1} = ['R',num2str(iRxn)];
                app.DeleteReactionDropDown.Items{iRxn+1} = ['R',num2str(iRxn)];
            end
            app.DeleteReactionDropDown.Value = app.DeleteReactionDropDown.Items{1};
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated.'; % This updates the text by the Update Model Button to notify the user that the model parameters have not been updated
            app.UnsavedChanges = true;
        end

        % Value changed function: DeleteSpeciesDropDown
        function DeleteSpeciesDropDownValueChanged(app, event)
            value = app.DeleteSpeciesDropDown.Value;
            J = strcmp(app.SSITModel.species,value);
            app.SSITModel.species=app.SSITModel.species(~J);
            app.SpeciesTable.Data = app.SpeciesTable.Data(~J,:);
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated.'; % This updates the text by the Update Model Button to notify the user that the model parameters have not been updated
            app.DeleteSpeciesDropDown.Items = ['Select';app.SSITModel.species];
            app.UnsavedChanges = true;
        end

        % Value changed function: DeleteInputDropDown
        function DeleteInputDropDownValueChanged(app, event)
            value = app.DeleteInputDropDown.Value;
            J = ones(size(app.ModelInputTable.Data,1),1,'logical');
            for i = 1:length(J)
                if strcmp(app.ModelInputTable.Data{i,1},value)
                    J(i) = 0;
                end
            end
            app.ModelInputTable.Data = app.ModelInputTable.Data(J,:); 
            app.DeleteInputDropDown.Value = app.DeleteInputDropDown.Items{1};
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has NOT been updated.'; % This updates the text by the Update Model Button to notify the user that the model parameters have not been updated
            app.UnsavedChanges = true;
        end

        % Value changed function: ChooseSSITModel_2
        function ChooseSSITModel_2ValueChanged(app, event)
            value = app.ChooseSSITModel_2.Value;
            app.ChooseSSITModel.Value = value;
            ChooseSSITModelValueChanged(app,event);
            
        end

        % Button pushed function: ClearConstraintsButton
        function ClearConstraintsButtonPushed(app, event)
            for iConstr = 1:6
                if iConstr>1
                    app.(['AndOr',num2str(iConstr)]).Value = '-';
                end
                app.(['DataConstrText',num2str(iConstr)]).Value = '-';
                app.(['DataConstrChoice',num2str(iConstr)]).Items = ['-';app.DataLoadingAndFittingTabOutputs.columns'];
                app.(['DataConstrChoice',num2str(iConstr)]).Value = '-';
            end
            DataConstrChoice1ValueChanged(app, event)
        end

        % Value changed function: DataConstrChoice1, DataConstrChoice2, 
        % ...and 4 other components
        function DataConstrChoice1ValueChanged(app, event)
            for iConstr = 1:6
                J = find(strcmp(app.DataLoadingAndFittingTabOutputs.columns,app.(['DataConstrChoice',num2str(iConstr)]).Value));
                if isempty(J)
                    app.(['DataLogical',num2str(iConstr)]).Items = {'NA'};
                else
                    switch app.DataLoadingAndFittingTabOutputs.columnTypes{J}
                        case 'numeric'
                            app.(['DataLogical',num2str(iConstr)]).Items = {'==';'~=';'>';'>=';'<';'<='};
                        case 'string'
                            app.(['DataLogical',num2str(iConstr)]).Items = {'is =';'is not ='};
                    end
                end
            end

        end

        % Button pushed function: SolveandPlotButton
        function SolveandPlotButtonPushed(app, event)
            app.SSITModel.solutionScheme = 'fsp';
            [~,~,app.SSITModel] = app.SSITModel.solve;
            app.SSITModel.makeFitPlot
        end

        % Value changed function: RenameSpeciesDropDown
        function RenameSpeciesDropDownValueChanged(app, event)
            value = app.RenameSpeciesDropDown.Value;
            if strcmp(value,'Select')
                return  % no species selected.
            end
            prompt = {'New Species Name:'};
            dlgtitle = ['Enter new name for species',value];
            dims = [1 50];  % [height width] of input field
            defaultInput = {value};
            newname = inputdlg(prompt, dlgtitle, dims, defaultInput);
            J = strcmp(app.SSITModel.species,newname{1});
            if sum(J)>=1
                error('There is already another species with that name. ')
            elseif sum(J)==0
                J2 = strcmp(app.SSITModel.parameters(:,1),newname{1});
                if sum(J2)>0
                    disp('Warning -- there is a parameter by that name.  It will be removed and replaced with this new species.')
                end

                app.SSITModel.species(strcmp(app.SSITModel.species,value)) = newname;
                nRxn = length(app.SSITModel.propensityFunctions);
                for iRxn = 1:nRxn
                    app.SSITModel.propensityFunctions{iRxn} = strrep(app.SSITModel.propensityFunctions{iRxn},value,newname{1});
                    eqn =  str2sym(app.SSITModel.propensityFunctions{iRxn}); eqn =  subs(eqn,value,newname{1}); str = char(eqn);
                    app.SSITModel.propensityFunctions{iRxn} = str;
                    app.ModelReactionTable.Data{iRxn,4} = str;
                end
                ModelReactionTableCellEdit(app, event)
                updateAppFromSSIT(app,false,true);
            end

        end

        % Button pushed function: ModelSaveButton_2
        function ModelSaveButton_2Pushed(app, event)
            eval([app.ModelFile.modelName,'=app.SSITModel;'])
            save(app.ModelFile.fileName,app.ModelFile.modelName,'-append');
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            app.UIFigure.Position = [100 100 1396 666];
            app.UIFigure.Name = 'UI Figure';
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {12, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 2;

            % Create TabGroup
            app.TabGroup = uitabgroup(app.RightPanel);
            app.TabGroup.Position = [1 6 1378 660];

            % Create ModelTab
            app.ModelTab = uitab(app.TabGroup);
            app.ModelTab.Tooltip = {'Use this tab to enter or change model.'};
            app.ModelTab.Title = 'Model';

            % Create ReactionTextAxes
            app.ReactionTextAxes = uiaxes(app.ModelTab);
            app.ReactionTextAxes.AmbientLightColor = 'none';
            app.ReactionTextAxes.XColor = 'none';
            app.ReactionTextAxes.XTick = [];
            app.ReactionTextAxes.YColor = 'none';
            app.ReactionTextAxes.YTick = [];
            app.ReactionTextAxes.Color = 'none';
            app.ReactionTextAxes.GridColor = 'none';
            app.ReactionTextAxes.MinorGridColor = 'none';
            app.ReactionTextAxes.Position = [661 13 421 390];

            % Create ModelReactionTable
            app.ModelReactionTable = uitable(app.ModelTab);
            app.ModelReactionTable.ColumnName = {'Rxn Num.'; 'Reactants'; 'Products'; 'Propensity'};
            app.ModelReactionTable.ColumnWidth = {115, 'auto', 'auto', 400};
            app.ModelReactionTable.RowName = {};
            app.ModelReactionTable.ColumnEditable = [false true true true];
            app.ModelReactionTable.CellEditCallback = createCallbackFcn(app, @ModelReactionTableCellEdit, true);
            app.ModelReactionTable.Tooltip = {'List number of reactants consumed or produced (e.g. ''x1(2)'' corresponds to 2 molecules of S1). Separate multiple reactant/products with comma.'; ''; 'For propensities use x1 x2 x3 for the three species. You may use arbitrary parameter names and regular expressions (e.g. ''cos'' ''exp''  ''log''). '; ''; 'Free parameters that start with ''I'' (e.g. ''I1'' or  ''In2'') will be treated as inputs signals.'; ''; 'If you wish to delete a reaction'; ' enter ''y'' in the final column.'};
            app.ModelReactionTable.Position = [13 130 638 184];

            % Create ModelAddReactionButton
            app.ModelAddReactionButton = uibutton(app.ModelTab, 'state');
            app.ModelAddReactionButton.ValueChangedFcn = createCallbackFcn(app, @ModelAddReactionButtonValueChanged, true);
            app.ModelAddReactionButton.Tooltip = {'Use this button to add another reaction to the model.'};
            app.ModelAddReactionButton.Text = 'Add Reaction';
            app.ModelAddReactionButton.BackgroundColor = [0 1 0];
            app.ModelAddReactionButton.Position = [39 478 139 28];

            % Create ModelhasnotbeenupdatedLabel
            app.ModelhasnotbeenupdatedLabel = uilabel(app.ModelTab);
            app.ModelhasnotbeenupdatedLabel.VerticalAlignment = 'top';
            app.ModelhasnotbeenupdatedLabel.Position = [167 340 304 26];
            app.ModelhasnotbeenupdatedLabel.Text = 'Model has not been updated.';

            % Create ModelUpdateButton
            app.ModelUpdateButton = uibutton(app.ModelTab, 'push');
            app.ModelUpdateButton.ButtonPushedFcn = createCallbackFcn(app, @ModelUpdateButtonPushed, true);
            app.ModelUpdateButton.BackgroundColor = [0 1 0];
            app.ModelUpdateButton.Tooltip = {'Press this button to update model with new parameters or inputs.'};
            app.ModelUpdateButton.Position = [16 343 145 28];
            app.ModelUpdateButton.Text = 'Update Model';

            % Create ModelParameterTable
            app.ModelParameterTable = uitable(app.ModelTab);
            app.ModelParameterTable.ColumnName = {'Name'; 'Value'};
            app.ModelParameterTable.ColumnWidth = {75, 'auto'};
            app.ModelParameterTable.RowName = {};
            app.ModelParameterTable.ColumnEditable = [false true];
            app.ModelParameterTable.CellEditCallback = createCallbackFcn(app, @ModelParameterTableCellEdit, true);
            app.ModelParameterTable.Tooltip = {'Adjust constant parameters here.'};
            app.ModelParameterTable.Position = [1112 97 244 285];

            % Create ParametersLabel
            app.ParametersLabel = uilabel(app.ModelTab);
            app.ParametersLabel.VerticalAlignment = 'top';
            app.ParametersLabel.FontWeight = 'bold';
            app.ParametersLabel.Position = [1112 376 216 25];
            app.ParametersLabel.Text = 'Parameters';

            % Create ModelInputTable
            app.ModelInputTable = uitable(app.ModelTab);
            app.ModelInputTable.ColumnName = {'Name'; 'Value'};
            app.ModelInputTable.ColumnWidth = {75, 'auto'};
            app.ModelInputTable.RowName = {};
            app.ModelInputTable.ColumnEditable = [false true];
            app.ModelInputTable.CellEditCallback = createCallbackFcn(app, @ModelInputTableCellEdit, true);
            app.ModelInputTable.Tooltip = {'Adjust form/parameters of input signals here as functions of time (e.g ''k*(1+sin(t)'' ). Any new symbolic variables (e.g. ''k'' ) will be added to the list of free parameters above.'};
            app.ModelInputTable.Position = [14 9 637 86];

            % Create DefineTimeVaryingInputSignalsLabel
            app.DefineTimeVaryingInputSignalsLabel = uilabel(app.ModelTab);
            app.DefineTimeVaryingInputSignalsLabel.VerticalAlignment = 'top';
            app.DefineTimeVaryingInputSignalsLabel.FontWeight = 'bold';
            app.DefineTimeVaryingInputSignalsLabel.Position = [15 94 224 24];
            app.DefineTimeVaryingInputSignalsLabel.Text = 'Define Time-Varying Input Signals';

            % Create ModelFolderLabel
            app.ModelFolderLabel = uilabel(app.ModelTab);
            app.ModelFolderLabel.HorizontalAlignment = 'right';
            app.ModelFolderLabel.FontWeight = 'bold';
            app.ModelFolderLabel.Position = [15 592 86 38];
            app.ModelFolderLabel.Text = 'Model Folder';

            % Create ModelUsePresetExampleTypeDropDown
            app.ModelUsePresetExampleTypeDropDown = uidropdown(app.ModelTab);
            app.ModelUsePresetExampleTypeDropDown.Items = {'Other'};
            app.ModelUsePresetExampleTypeDropDown.ValueChangedFcn = createCallbackFcn(app, @ModelUsePresetExampleTypeDropDownValueChanged, true);
            app.ModelUsePresetExampleTypeDropDown.Position = [109 601 314 22];
            app.ModelUsePresetExampleTypeDropDown.Value = 'Other';

            % Create ModelSaveButton
            app.ModelSaveButton = uibutton(app.ModelTab, 'push');
            app.ModelSaveButton.ButtonPushedFcn = createCallbackFcn(app, @ModelSaveButtonPushed, true);
            app.ModelSaveButton.BackgroundColor = [0 1 0];
            app.ModelSaveButton.FontWeight = 'bold';
            app.ModelSaveButton.Tooltip = {'Press this button to save your current model and parameters.'};
            app.ModelSaveButton.Position = [1184 65 100 28];
            app.ModelSaveButton.Text = 'Save Model';

            % Create ModelLoadButton
            app.ModelLoadButton = uibutton(app.ModelTab, 'push');
            app.ModelLoadButton.ButtonPushedFcn = createCallbackFcn(app, @ModelLoadButtonPushed, true);
            app.ModelLoadButton.BackgroundColor = [0 1 0];
            app.ModelLoadButton.FontWeight = 'bold';
            app.ModelLoadButton.Tooltip = {'Press this button to load a saved model.'};
            app.ModelLoadButton.Position = [14 553 100 28];
            app.ModelLoadButton.Text = 'Load Model';

            % Create ModelAbout
            app.ModelAbout = uitextarea(app.ModelTab);
            app.ModelAbout.ValueChangedFcn = createCallbackFcn(app, @ModelAboutValueChanged, true);
            app.ModelAbout.BackgroundColor = [0.8 0.8 0.8];
            app.ModelAbout.Position = [661 411 426 143];
            app.ModelAbout.Value = {'Add model description here.'};

            % Create ModelDropDownLabel
            app.ModelDropDownLabel = uilabel(app.ModelTab);
            app.ModelDropDownLabel.HorizontalAlignment = 'right';
            app.ModelDropDownLabel.Position = [701 601 42 22];
            app.ModelDropDownLabel.Text = 'Model ';

            % Create ModelDropDown
            app.ModelDropDown = uidropdown(app.ModelTab);
            app.ModelDropDown.ValueChangedFcn = createCallbackFcn(app, @ModelDropDownValueChanged, true);
            app.ModelDropDown.Position = [529 601 352 22];

            % Create IncreaseFontSizeRxn
            app.IncreaseFontSizeRxn = uibutton(app.ModelTab, 'push');
            app.IncreaseFontSizeRxn.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeRxn.Visible = 'off';
            app.IncreaseFontSizeRxn.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeRxn.Position = [1277 598 17 22];
            app.IncreaseFontSizeRxn.Text = '+';

            % Create DecreaseFontSizeRxn
            app.DecreaseFontSizeRxn = uibutton(app.ModelTab, 'push');
            app.DecreaseFontSizeRxn.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeRxn.Visible = 'off';
            app.DecreaseFontSizeRxn.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeRxn.Position = [1312 598 17 22];
            app.DecreaseFontSizeRxn.Text = '-';

            % Create FontSizeLabelRxn
            app.FontSizeLabelRxn = uilabel(app.ModelTab);
            app.FontSizeLabelRxn.HorizontalAlignment = 'right';
            app.FontSizeLabelRxn.VerticalAlignment = 'bottom';
            app.FontSizeLabelRxn.Visible = 'off';
            app.FontSizeLabelRxn.Position = [1138 599 117 34];
            app.FontSizeLabelRxn.Text = {'Font Size'; ''};

            % Create SubFolderLabel
            app.SubFolderLabel = uilabel(app.ModelTab);
            app.SubFolderLabel.HorizontalAlignment = 'right';
            app.SubFolderLabel.FontWeight = 'bold';
            app.SubFolderLabel.Position = [450 595 68 36];
            app.SubFolderLabel.Text = 'Sub Folder';

            % Create LoadSBMLModelButton
            app.LoadSBMLModelButton = uibutton(app.ModelTab, 'push');
            app.LoadSBMLModelButton.ButtonPushedFcn = createCallbackFcn(app, @LoadSBMLModelButtonPushed, true);
            app.LoadSBMLModelButton.BackgroundColor = [1 1 0];
            app.LoadSBMLModelButton.FontWeight = 'bold';
            app.LoadSBMLModelButton.Position = [16 521 121 23];
            app.LoadSBMLModelButton.Text = 'Load SBML Model';

            % Create CreateNewNStateModelButton
            app.CreateNewNStateModelButton = uibutton(app.ModelTab, 'push');
            app.CreateNewNStateModelButton.ButtonPushedFcn = createCallbackFcn(app, @CreateNewNStateModelButtonPushed, true);
            app.CreateNewNStateModelButton.BackgroundColor = [1 1 0];
            app.CreateNewNStateModelButton.FontWeight = 'bold';
            app.CreateNewNStateModelButton.Enable = 'off';
            app.CreateNewNStateModelButton.Visible = 'off';
            app.CreateNewNStateModelButton.Position = [150 522 169 23];
            app.CreateNewNStateModelButton.Text = 'Create New N-State Model';

            % Create DeleteReactionDropDown_2Label
            app.DeleteReactionDropDown_2Label = uilabel(app.ModelTab);
            app.DeleteReactionDropDown_2Label.HorizontalAlignment = 'right';
            app.DeleteReactionDropDown_2Label.Position = [202 481 90 22];
            app.DeleteReactionDropDown_2Label.Text = 'Delete Reaction';

            % Create DeleteReactionDropDown
            app.DeleteReactionDropDown = uidropdown(app.ModelTab);
            app.DeleteReactionDropDown.ValueChangedFcn = createCallbackFcn(app, @DeleteReactionDropDownValueChanged, true);
            app.DeleteReactionDropDown.Position = [300 481 100 22];

            % Create AddSpeciesButton
            app.AddSpeciesButton = uibutton(app.ModelTab, 'state');
            app.AddSpeciesButton.ValueChangedFcn = createCallbackFcn(app, @AddSpeciesButtonValueChanged, true);
            app.AddSpeciesButton.Tooltip = {'Use this button to add another reaction to the model.'};
            app.AddSpeciesButton.Text = 'Add Species';
            app.AddSpeciesButton.BackgroundColor = [0 1 0];
            app.AddSpeciesButton.Position = [39 437 139 28];

            % Create DeleteSpeciesDropDownLabel
            app.DeleteSpeciesDropDownLabel = uilabel(app.ModelTab);
            app.DeleteSpeciesDropDownLabel.HorizontalAlignment = 'right';
            app.DeleteSpeciesDropDownLabel.Position = [412 440 85 22];
            app.DeleteSpeciesDropDownLabel.Text = 'Delete Species';

            % Create DeleteSpeciesDropDown
            app.DeleteSpeciesDropDown = uidropdown(app.ModelTab);
            app.DeleteSpeciesDropDown.ValueChangedFcn = createCallbackFcn(app, @DeleteSpeciesDropDownValueChanged, true);
            app.DeleteSpeciesDropDown.Position = [505 440 100 22];

            % Create AbouttheModelLabel
            app.AbouttheModelLabel = uilabel(app.ModelTab);
            app.AbouttheModelLabel.Position = [667 556 98 22];
            app.AbouttheModelLabel.Text = 'About the Model ';

            % Create AddInputButton
            app.AddInputButton = uibutton(app.ModelTab, 'state');
            app.AddInputButton.ValueChangedFcn = createCallbackFcn(app, @AddInputButtonValueChanged, true);
            app.AddInputButton.Tooltip = {'Use this button to add another reaction to the model.'};
            app.AddInputButton.Text = 'Add Input';
            app.AddInputButton.BackgroundColor = [0 1 0];
            app.AddInputButton.Position = [39 397 139 28];

            % Create DeleteInputDropDownLabel
            app.DeleteInputDropDownLabel = uilabel(app.ModelTab);
            app.DeleteInputDropDownLabel.HorizontalAlignment = 'right';
            app.DeleteInputDropDownLabel.Position = [221 405 70 22];
            app.DeleteInputDropDownLabel.Text = 'Delete Input';

            % Create DeleteInputDropDown
            app.DeleteInputDropDown = uidropdown(app.ModelTab);
            app.DeleteInputDropDown.ValueChangedFcn = createCallbackFcn(app, @DeleteInputDropDownValueChanged, true);
            app.DeleteInputDropDown.Position = [299 405 100 22];

            % Create ChooseSSITModel
            app.ChooseSSITModel = uidropdown(app.ModelTab);
            app.ChooseSSITModel.Items = {'Other'};
            app.ChooseSSITModel.ValueChangedFcn = createCallbackFcn(app, @ChooseSSITModelValueChanged, true);
            app.ChooseSSITModel.Visible = 'off';
            app.ChooseSSITModel.Position = [261 556 366 22];
            app.ChooseSSITModel.Value = 'Other';

            % Create ChooseSSITModelLabel
            app.ChooseSSITModelLabel = uilabel(app.ModelTab);
            app.ChooseSSITModelLabel.Visible = 'off';
            app.ChooseSSITModelLabel.Position = [142 556 112 22];
            app.ChooseSSITModelLabel.Text = 'Choose SSIT Model';

            % Create ParametersLabel_3
            app.ParametersLabel_3 = uilabel(app.ModelTab);
            app.ParametersLabel_3.VerticalAlignment = 'top';
            app.ParametersLabel_3.FontWeight = 'bold';
            app.ParametersLabel_3.Position = [1112 572 216 25];
            app.ParametersLabel_3.Text = 'Species';

            % Create SpeciesTable
            app.SpeciesTable = uitable(app.ModelTab);
            app.SpeciesTable.ColumnName = {'Name'; 'Initiial Value'};
            app.SpeciesTable.ColumnWidth = {75, 'auto'};
            app.SpeciesTable.RowName = {};
            app.SpeciesTable.ColumnEditable = [false true];
            app.SpeciesTable.CellEditCallback = createCallbackFcn(app, @SpeciesTableCellEdit, true);
            app.SpeciesTable.Tooltip = {'Adjust constant parameters here.'};
            app.SpeciesTable.Position = [1112 411 244 167];

            % Create RenameSpeciesDropDownLabel
            app.RenameSpeciesDropDownLabel = uilabel(app.ModelTab);
            app.RenameSpeciesDropDownLabel.HorizontalAlignment = 'right';
            app.RenameSpeciesDropDownLabel.Position = [196 440 96 22];
            app.RenameSpeciesDropDownLabel.Text = 'Rename Species';

            % Create RenameSpeciesDropDown
            app.RenameSpeciesDropDown = uidropdown(app.ModelTab);
            app.RenameSpeciesDropDown.ValueChangedFcn = createCallbackFcn(app, @RenameSpeciesDropDownValueChanged, true);
            app.RenameSpeciesDropDown.Position = [300 440 100 22];

            % Create ModelSaveButton_2
            app.ModelSaveButton_2 = uibutton(app.ModelTab, 'push');
            app.ModelSaveButton_2.ButtonPushedFcn = createCallbackFcn(app, @ModelSaveButton_2Pushed, true);
            app.ModelSaveButton_2.BackgroundColor = [0 1 0];
            app.ModelSaveButton_2.FontWeight = 'bold';
            app.ModelSaveButton_2.Tooltip = {'Press this button to save your current model and parameters.'};
            app.ModelSaveButton_2.Position = [1082 22 75 28];
            app.ModelSaveButton_2.Text = 'Quick Save';

            % Create FileModelLabel
            app.FileModelLabel = uilabel(app.ModelTab);
            app.FileModelLabel.Position = [1166 20 203 30];
            app.FileModelLabel.Text = {'File:'; 'Model:'};

            % Create StochasticSimulationTab
            app.StochasticSimulationTab = uitab(app.TabGroup);
            app.StochasticSimulationTab.Tooltip = {'Use this tab to generate stochastic trajectories for the model dynamics.'};
            app.StochasticSimulationTab.Title = 'Stochastic Simulation';

            % Create SsaTrajAxes
            app.SsaTrajAxes = uiaxes(app.StochasticSimulationTab);
            title(app.SsaTrajAxes, 'Trajectories')
            xlabel(app.SsaTrajAxes, 'Time')
            ylabel(app.SsaTrajAxes, 'Response')
            app.SsaTrajAxes.PlotBoxAspectRatio = [1.24899598393574 1 1];
            app.SsaTrajAxes.Position = [238 183 300 245];

            % Create SsaHistAxes
            app.SsaHistAxes = uiaxes(app.StochasticSimulationTab);
            title(app.SsaHistAxes, 'Histogram')
            xlabel(app.SsaHistAxes, 'Molecule Count')
            ylabel(app.SsaHistAxes, 'Probability')
            app.SsaHistAxes.PlotBoxAspectRatio = [1.3130081300813 1 1];
            app.SsaHistAxes.Position = [566 225 311 245];

            % Create NumberofSimulationsEditFieldLabel
            app.NumberofSimulationsEditFieldLabel = uilabel(app.StochasticSimulationTab);
            app.NumberofSimulationsEditFieldLabel.VerticalAlignment = 'top';
            app.NumberofSimulationsEditFieldLabel.FontWeight = 'bold';
            app.NumberofSimulationsEditFieldLabel.Position = [25 568 136 55];
            app.NumberofSimulationsEditFieldLabel.Text = 'Number of Simulations';

            % Create SsaNumSimField
            app.SsaNumSimField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SsaNumSimField.Tooltip = {'Number of SSA Simulations to run.'; ''};
            app.SsaNumSimField.Position = [162 604 100 22];
            app.SsaNumSimField.Value = 100;

            % Create SsaRunButton
            app.SsaRunButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaRunButton.ButtonPushedFcn = createCallbackFcn(app, @SsaRunButtonPushed, true);
            app.SsaRunButton.BackgroundColor = [0 1 0];
            app.SsaRunButton.Tooltip = {'Individual trajectories for SSA'};
            app.SsaRunButton.Position = [160 453 114 28];
            app.SsaRunButton.Text = 'Run SSA';

            % Create InitialConditionsLabel
            app.InitialConditionsLabel = uilabel(app.StochasticSimulationTab);
            app.InitialConditionsLabel.HorizontalAlignment = 'right';
            app.InitialConditionsLabel.VerticalAlignment = 'bottom';
            app.InitialConditionsLabel.FontWeight = 'bold';
            app.InitialConditionsLabel.Position = [5 572 143 21];
            app.InitialConditionsLabel.Text = 'Initial Conditions';

            % Create SsaInitCondField
            app.SsaInitCondField = uieditfield(app.StochasticSimulationTab, 'text');
            app.SsaInitCondField.ValueChangedFcn = createCallbackFcn(app, @SsaInitCondFieldValueChanged, true);
            app.SsaInitCondField.HorizontalAlignment = 'right';
            app.SsaInitCondField.Tooltip = {'Initial concentrations of each species'; ''; 'Input as vector [x1'; 'x2'; 'x3]'};
            app.SsaInitCondField.Position = [162 568 100 22];
            app.SsaInitCondField.Value = '[1,0,0]';

            % Create PrintTimesEditFieldLabel
            app.PrintTimesEditFieldLabel = uilabel(app.StochasticSimulationTab);
            app.PrintTimesEditFieldLabel.HorizontalAlignment = 'right';
            app.PrintTimesEditFieldLabel.VerticalAlignment = 'bottom';
            app.PrintTimesEditFieldLabel.FontWeight = 'bold';
            app.PrintTimesEditFieldLabel.Position = [8 538 72 32];
            app.PrintTimesEditFieldLabel.Text = 'Print Times';

            % Create PrintTimesEditField
            app.PrintTimesEditField = uieditfield(app.StochasticSimulationTab, 'text');
            app.PrintTimesEditField.ValueChangedFcn = createCallbackFcn(app, @SensPrintTimesEditFieldValueChanged, true);
            app.PrintTimesEditField.HorizontalAlignment = 'right';
            app.PrintTimesEditField.Tooltip = {'SSA time evaluations'; ''; 'Input= [start:step:end]'};
            app.PrintTimesEditField.Position = [90 537 437 22];
            app.PrintTimesEditField.Value = '[0:0.1:10]';

            % Create showLabel
            app.showLabel = uilabel(app.StochasticSimulationTab);
            app.showLabel.VerticalAlignment = 'top';
            app.showLabel.Position = [12 404 65 29];
            app.showLabel.Text = 'show:';

            % Create SsaRunStatus
            app.SsaRunStatus = uilabel(app.StochasticSimulationTab);
            app.SsaRunStatus.VerticalAlignment = 'top';
            app.SsaRunStatus.Position = [282 453 217 28];
            app.SsaRunStatus.Text = 'Not yet run.';

            % Create SsaUpdatePlotsButton
            app.SsaUpdatePlotsButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaUpdatePlotsButton.ButtonPushedFcn = createCallbackFcn(app, @UpdatePlotsButtonPushed, true);
            app.SsaUpdatePlotsButton.BackgroundColor = [0 1 0];
            app.SsaUpdatePlotsButton.Visible = 'off';
            app.SsaUpdatePlotsButton.Position = [76 404 107 28];
            app.SsaUpdatePlotsButton.Text = 'Update Plots';

            % Create timeSliderLabel
            app.timeSliderLabel = uilabel(app.StochasticSimulationTab);
            app.timeSliderLabel.HorizontalAlignment = 'right';
            app.timeSliderLabel.VerticalAlignment = 'bottom';
            app.timeSliderLabel.Position = [512 519 89 32];
            app.timeSliderLabel.Text = 'time';

            % Create SsaTimeSlider
            app.SsaTimeSlider = uislider(app.StochasticSimulationTab);
            app.SsaTimeSlider.Limits = [0 10];
            app.SsaTimeSlider.ValueChangedFcn = createCallbackFcn(app, @UpdatePlotsButtonPushed, true);
            app.SsaTimeSlider.Tooltip = {'Time Slider for Histogram'};
            app.SsaTimeSlider.Position = [622 525 240 3];

            % Create SsaExportFiguresButton
            app.SsaExportFiguresButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaExportFiguresButton.ButtonPushedFcn = createCallbackFcn(app, @SsaExportFiguresButtonPushed, true);
            app.SsaExportFiguresButton.BackgroundColor = [0 1 0];
            app.SsaExportFiguresButton.Tooltip = {'Export both figures @ current time'};
            app.SsaExportFiguresButton.Position = [903 433 150 28];
            app.SsaExportFiguresButton.Text = 'Export Figures';

            % Create SsaExportTrajectoriesButton
            app.SsaExportTrajectoriesButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaExportTrajectoriesButton.ButtonPushedFcn = createCallbackFcn(app, @SsaExportTrajectoriesButtonPushed, true);
            app.SsaExportTrajectoriesButton.BackgroundColor = [0 1 0];
            app.SsaExportTrajectoriesButton.Tooltip = {'Export Trajectory plot'};
            app.SsaExportTrajectoriesButton.Position = [903 383 150 28];
            app.SsaExportTrajectoriesButton.Text = 'Export Trajectories';

            % Create SsaExportHistogramButton
            app.SsaExportHistogramButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaExportHistogramButton.ButtonPushedFcn = createCallbackFcn(app, @SsaExportHistogramButtonPushed, true);
            app.SsaExportHistogramButton.BackgroundColor = [0 1 0];
            app.SsaExportHistogramButton.Tooltip = {'Export Histogram Plot @ current time'};
            app.SsaExportHistogramButton.Position = [903 336 150 28];
            app.SsaExportHistogramButton.Text = 'Export Histogram';

            % Create SsaSolutionsattimeLabel
            app.SsaSolutionsattimeLabel = uilabel(app.StochasticSimulationTab);
            app.SsaSolutionsattimeLabel.VerticalAlignment = 'top';
            app.SsaSolutionsattimeLabel.FontSize = 24;
            app.SsaSolutionsattimeLabel.Position = [596 553 494 31];
            app.SsaSolutionsattimeLabel.Text = 'Solutions at time: NA';

            % Create XmaxLabel
            app.XmaxLabel = uilabel(app.StochasticSimulationTab);
            app.XmaxLabel.HorizontalAlignment = 'right';
            app.XmaxLabel.VerticalAlignment = 'bottom';
            app.XmaxLabel.Position = [276 126 61 40];
            app.XmaxLabel.Text = 'Xmax';

            % Create SSAXmaxEditField
            app.SSAXmaxEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSAXmaxEditField.ValueChangedFcn = createCallbackFcn(app, @SSAXmaxEditFieldValueChanged, true);
            app.SSAXmaxEditField.Tooltip = {'Xmax value for SSA trajectories'};
            app.SSAXmaxEditField.Position = [352 126 49 22];

            % Create YmaxLabel
            app.YmaxLabel = uilabel(app.StochasticSimulationTab);
            app.YmaxLabel.HorizontalAlignment = 'right';
            app.YmaxLabel.VerticalAlignment = 'bottom';
            app.YmaxLabel.Position = [276 92 61 45];
            app.YmaxLabel.Text = 'Ymax';

            % Create SSAYmaxEditField
            app.SSAYmaxEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSAYmaxEditField.ValueChangedFcn = createCallbackFcn(app, @SSAYmaxEditFieldValueChanged, true);
            app.SSAYmaxEditField.Tooltip = {'Ymax value for SSA trajectories'};
            app.SSAYmaxEditField.Position = [352 92 49 22];

            % Create XminLabel
            app.XminLabel = uilabel(app.StochasticSimulationTab);
            app.XminLabel.HorizontalAlignment = 'right';
            app.XminLabel.VerticalAlignment = 'bottom';
            app.XminLabel.Position = [138 126 62 39];
            app.XminLabel.Text = 'Xmin';

            % Create SSAXminEditField
            app.SSAXminEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSAXminEditField.ValueChangedFcn = createCallbackFcn(app, @SSAXminEditFieldValueChanged, true);
            app.SSAXminEditField.Tooltip = {'Xmin value for SSA trajectories'};
            app.SSAXminEditField.Position = [215 126 49 22];

            % Create YminLabel
            app.YminLabel = uilabel(app.StochasticSimulationTab);
            app.YminLabel.HorizontalAlignment = 'right';
            app.YminLabel.VerticalAlignment = 'bottom';
            app.YminLabel.Position = [138 92 61 37];
            app.YminLabel.Text = 'Ymin';

            % Create SSAYminEditField
            app.SSAYminEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSAYminEditField.ValueChangedFcn = createCallbackFcn(app, @SSA_hist_YmaxEditFieldValueChanged, true);
            app.SSAYminEditField.Tooltip = {'Yminvalue for SSA trajectories'};
            app.SSAYminEditField.Position = [214 92 49 22];

            % Create SsaParallelCheckBox
            app.SsaParallelCheckBox = uicheckbox(app.StochasticSimulationTab);
            app.SsaParallelCheckBox.ValueChangedFcn = createCallbackFcn(app, @SsaParallelCheckBoxValueChanged, true);
            app.SsaParallelCheckBox.Tooltip = {'Evaluate SSA in parallel'; 'Good for large times and simulations'};
            app.SsaParallelCheckBox.Text = 'Parallel';
            app.SsaParallelCheckBox.Position = [11 464 128 32];

            % Create SsaNonParallelCheckBox
            app.SsaNonParallelCheckBox = uicheckbox(app.StochasticSimulationTab);
            app.SsaNonParallelCheckBox.ValueChangedFcn = createCallbackFcn(app, @SsaNonParallelCheckBoxValueChanged, true);
            app.SsaNonParallelCheckBox.Tooltip = {'Evaluate SSA in series'};
            app.SsaNonParallelCheckBox.Text = 'Non-Parallel';
            app.SsaNonParallelCheckBox.Position = [11 433 128 32];
            app.SsaNonParallelCheckBox.Value = true;

            % Create XmaxLabel_2
            app.XmaxLabel_2 = uilabel(app.StochasticSimulationTab);
            app.XmaxLabel_2.HorizontalAlignment = 'right';
            app.XmaxLabel_2.VerticalAlignment = 'bottom';
            app.XmaxLabel_2.Position = [724 168 74 40];
            app.XmaxLabel_2.Text = 'Xmax';

            % Create SSA_hist_XmaxEditField
            app.SSA_hist_XmaxEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSA_hist_XmaxEditField.ValueChangedFcn = createCallbackFcn(app, @SSA_hist_YmaxEditFieldValueChanged, true);
            app.SSA_hist_XmaxEditField.Tooltip = {'Xmax value for SSA trajectories'};
            app.SSA_hist_XmaxEditField.Position = [813 168 49 22];

            % Create YmaxLabel_2
            app.YmaxLabel_2 = uilabel(app.StochasticSimulationTab);
            app.YmaxLabel_2.HorizontalAlignment = 'right';
            app.YmaxLabel_2.VerticalAlignment = 'bottom';
            app.YmaxLabel_2.Position = [727 134 71 44];
            app.YmaxLabel_2.Text = 'Ymax';

            % Create SSA_hist_YmaxEditField
            app.SSA_hist_YmaxEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSA_hist_YmaxEditField.ValueChangedFcn = createCallbackFcn(app, @SSA_hist_YmaxEditFieldValueChanged, true);
            app.SSA_hist_YmaxEditField.Tooltip = {'Ymax value for SSA trajectories'};
            app.SSA_hist_YmaxEditField.Position = [813 134 49 22];

            % Create XminLabel_2
            app.XminLabel_2 = uilabel(app.StochasticSimulationTab);
            app.XminLabel_2.HorizontalAlignment = 'right';
            app.XminLabel_2.VerticalAlignment = 'bottom';
            app.XminLabel_2.Position = [595 168 66 43];
            app.XminLabel_2.Text = 'Xmin';

            % Create SSA_hist_XminEditField
            app.SSA_hist_XminEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSA_hist_XminEditField.ValueChangedFcn = createCallbackFcn(app, @SSA_hist_YmaxEditFieldValueChanged, true);
            app.SSA_hist_XminEditField.Tooltip = {'Xmin value for SSA trajectories'};
            app.SSA_hist_XminEditField.Position = [676 168 49 22];

            % Create YminLabel_2
            app.YminLabel_2 = uilabel(app.StochasticSimulationTab);
            app.YminLabel_2.HorizontalAlignment = 'right';
            app.YminLabel_2.VerticalAlignment = 'bottom';
            app.YminLabel_2.Position = [581 134 79 44];
            app.YminLabel_2.Text = 'Ymin';

            % Create SSA_hist_YminEditField
            app.SSA_hist_YminEditField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SSA_hist_YminEditField.ValueChangedFcn = createCallbackFcn(app, @SSA_hist_YmaxEditFieldValueChanged, true);
            app.SSA_hist_YminEditField.Tooltip = {'Yminvalue for SSA trajectories'};
            app.SSA_hist_YminEditField.Position = [675 134 49 22];

            % Create NSimsEditFieldLabel
            app.NSimsEditFieldLabel = uilabel(app.StochasticSimulationTab);
            app.NSimsEditFieldLabel.VerticalAlignment = 'top';
            app.NSimsEditFieldLabel.Position = [15 387 88 22];
            app.NSimsEditFieldLabel.Text = 'N Sims:';

            % Create SsaNumSimToPlotField
            app.SsaNumSimToPlotField = uieditfield(app.StochasticSimulationTab, 'numeric');
            app.SsaNumSimToPlotField.ValueChangedFcn = createCallbackFcn(app, @UpdatePlotsButtonPushed, true);
            app.SsaNumSimToPlotField.Tooltip = {'Number of SSA Simulations to show in trajectory plot.'; ''};
            app.SsaNumSimToPlotField.Position = [20 366 34 22];
            app.SsaNumSimToPlotField.Value = 100;

            % Create SignalUpdateRateEditFieldLabel
            app.SignalUpdateRateEditFieldLabel = uilabel(app.StochasticSimulationTab);
            app.SignalUpdateRateEditFieldLabel.HorizontalAlignment = 'right';
            app.SignalUpdateRateEditFieldLabel.VerticalAlignment = 'bottom';
            app.SignalUpdateRateEditFieldLabel.FontWeight = 'bold';
            app.SignalUpdateRateEditFieldLabel.Enable = 'off';
            app.SignalUpdateRateEditFieldLabel.Position = [9 505 139 41];
            app.SignalUpdateRateEditFieldLabel.Text = 'Signal Update Rate';

            % Create SsaSignalUpdateRateField
            app.SsaSignalUpdateRateField = uieditfield(app.StochasticSimulationTab, 'text');
            app.SsaSignalUpdateRateField.HorizontalAlignment = 'right';
            app.SsaSignalUpdateRateField.Enable = 'off';
            app.SsaSignalUpdateRateField.Tooltip = {'Rate to update signal level (for time varying systems only).'};
            app.SsaSignalUpdateRateField.Position = [163 501 100 22];
            app.SsaSignalUpdateRateField.Value = '1';

            % Create SsaExportExcelButton
            app.SsaExportExcelButton = uibutton(app.StochasticSimulationTab, 'push');
            app.SsaExportExcelButton.ButtonPushedFcn = createCallbackFcn(app, @SsaExportExcelButtonPushed, true);
            app.SsaExportExcelButton.BackgroundColor = [0 1 0];
            app.SsaExportExcelButton.Tooltip = {'Export trajectories to Excel datasheet '};
            app.SsaExportExcelButton.Position = [9 140 130 28];
            app.SsaExportExcelButton.Text = 'Export to Excel';

            % Create DecreaseFontSizeSSA
            app.DecreaseFontSizeSSA = uibutton(app.StochasticSimulationTab, 'push');
            app.DecreaseFontSizeSSA.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeSSA.Visible = 'off';
            app.DecreaseFontSizeSSA.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeSSA.Position = [1314 599 17 22];
            app.DecreaseFontSizeSSA.Text = '-';

            % Create IncreaseFontSizeSsa
            app.IncreaseFontSizeSsa = uibutton(app.StochasticSimulationTab, 'push');
            app.IncreaseFontSizeSsa.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeSsa.Visible = 'off';
            app.IncreaseFontSizeSsa.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeSsa.Position = [1274 599 17 22];
            app.IncreaseFontSizeSsa.Text = '+';

            % Create FontSizeLabelSsa
            app.FontSizeLabelSsa = uilabel(app.StochasticSimulationTab);
            app.FontSizeLabelSsa.HorizontalAlignment = 'right';
            app.FontSizeLabelSsa.VerticalAlignment = 'bottom';
            app.FontSizeLabelSsa.Visible = 'off';
            app.FontSizeLabelSsa.Tooltip = {'Increase global font size'};
            app.FontSizeLabelSsa.Position = [1130 599 117 34];
            app.FontSizeLabelSsa.Text = {'Font Size'; ''};

            % Create SsaShowOdeCheckBox
            app.SsaShowOdeCheckBox = uicheckbox(app.StochasticSimulationTab);
            app.SsaShowOdeCheckBox.ValueChangedFcn = createCallbackFcn(app, @UpdatePlotsButtonPushed, true);
            app.SsaShowOdeCheckBox.Text = 'Show ODE';
            app.SsaShowOdeCheckBox.Position = [28 207 82 22];

            % Create SpeciestoShowListBoxLabel
            app.SpeciestoShowListBoxLabel = uilabel(app.StochasticSimulationTab);
            app.SpeciestoShowListBoxLabel.HorizontalAlignment = 'right';
            app.SpeciestoShowListBoxLabel.Position = [23 327 96 22];
            app.SpeciestoShowListBoxLabel.Text = 'Species to Show';

            % Create SpeciestoShowListBox
            app.SpeciestoShowListBox = uilistbox(app.StochasticSimulationTab);
            app.SpeciestoShowListBox.Items = {'x1', 'x2', 'x3'};
            app.SpeciestoShowListBox.Multiselect = 'on';
            app.SpeciestoShowListBox.ValueChangedFcn = createCallbackFcn(app, @SpeciestoShowListBoxValueChanged, true);
            app.SpeciestoShowListBox.Position = [47 251 100 74];
            app.SpeciestoShowListBox.Value = {'x1'};

            % Create FSPTab
            app.FSPTab = uitab(app.TabGroup);
            app.FSPTab.Tooltip = {'Use this tab to solve for the time varying probabiity distributions for your model.'};
            app.FSPTab.Title = 'FSP';

            % Create FspAxes
            app.FspAxes = uiaxes(app.FSPTab);
            title(app.FspAxes, 'Marginals')
            xlabel(app.FspAxes, 'Species Count')
            ylabel(app.FspAxes, 'Probability')
            app.FspAxes.PlotBoxAspectRatio = [1.98076923076923 1 1];
            app.FspAxes.Position = [552 296 383 241];

            % Create FspRunButtom
            app.FspRunButtom = uibutton(app.FSPTab, 'push');
            app.FspRunButtom.ButtonPushedFcn = createCallbackFcn(app, @FspRunButtomPushed, true);
            app.FspRunButtom.BackgroundColor = [0 1 0];
            app.FspRunButtom.Tooltip = {'Run FSP calculation with current constraints. If no constraints'; ' runs with default constraints.'};
            app.FspRunButtom.Position = [221 596 112 28];
            app.FspRunButtom.Text = 'Run FSP';

            % Create FspInitCondField
            app.FspInitCondField = uieditfield(app.FSPTab, 'text');
            app.FspInitCondField.ValueChangedFcn = createCallbackFcn(app, @SsaInitCondFieldValueChanged, true);
            app.FspInitCondField.HorizontalAlignment = 'right';
            app.FspInitCondField.Tooltip = {'Initial conditions for FSP '; ''; 'input as vector'; '[x1'; 'x2'; 'x3]'};
            app.FspInitCondField.Position = [115 572 100 22];
            app.FspInitCondField.Value = '[1,0,0]';

            % Create FspRunningStatus
            app.FspRunningStatus = uilabel(app.FSPTab);
            app.FspRunningStatus.VerticalAlignment = 'top';
            app.FspRunningStatus.Position = [223 563 183 28];
            app.FspRunningStatus.Text = 'Not yet run.';

            % Create FspUpdatePlotButton
            app.FspUpdatePlotButton = uibutton(app.FSPTab, 'push');
            app.FspUpdatePlotButton.ButtonPushedFcn = createCallbackFcn(app, @UpdatePlotsButton_2Pushed, true);
            app.FspUpdatePlotButton.BackgroundColor = [0 1 0];
            app.FspUpdatePlotButton.Tooltip = {'Update FSP Marginal plot'};
            app.FspUpdatePlotButton.Position = [499 257 114 28];
            app.FspUpdatePlotButton.Text = 'Update Plots';

            % Create ErrorToleranceEditFieldLabel
            app.ErrorToleranceEditFieldLabel = uilabel(app.FSPTab);
            app.ErrorToleranceEditFieldLabel.HorizontalAlignment = 'right';
            app.ErrorToleranceEditFieldLabel.VerticalAlignment = 'bottom';
            app.ErrorToleranceEditFieldLabel.FontWeight = 'bold';
            app.ErrorToleranceEditFieldLabel.Position = [5 606 95 27];
            app.ErrorToleranceEditFieldLabel.Text = 'Error Tolerance';

            % Create FspErrorTolField
            app.FspErrorTolField = uieditfield(app.FSPTab, 'numeric');
            app.FspErrorTolField.FontWeight = 'bold';
            app.FspErrorTolField.Tooltip = {'Error Tolerance for FSP'; ''; 'Input as scalar'};
            app.FspErrorTolField.Position = [115 602 100 22];
            app.FspErrorTolField.Value = 0.001;

            % Create PrintTimesEditField_2Label
            app.PrintTimesEditField_2Label = uilabel(app.FSPTab);
            app.PrintTimesEditField_2Label.HorizontalAlignment = 'right';
            app.PrintTimesEditField_2Label.VerticalAlignment = 'bottom';
            app.PrintTimesEditField_2Label.FontWeight = 'bold';
            app.PrintTimesEditField_2Label.Position = [9 521 92 31];
            app.PrintTimesEditField_2Label.Text = 'Print Times';

            % Create FspPrintTimesField
            app.FspPrintTimesField = uieditfield(app.FSPTab, 'text');
            app.FspPrintTimesField.ValueChangedFcn = createCallbackFcn(app, @SensPrintTimesEditFieldValueChanged, true);
            app.FspPrintTimesField.HorizontalAlignment = 'right';
            app.FspPrintTimesField.Tooltip = {'Time evaluation for FSP solution'; ''; 'input[start:step:stop]'};
            app.FspPrintTimesField.Position = [116 517 389 22];
            app.FspPrintTimesField.Value = '[0:0.1:10]';

            % Create timeSlider_2Label
            app.timeSlider_2Label = uilabel(app.FSPTab);
            app.timeSlider_2Label.HorizontalAlignment = 'right';
            app.timeSlider_2Label.VerticalAlignment = 'bottom';
            app.timeSlider_2Label.Position = [437 410 52 43];
            app.timeSlider_2Label.Text = 'time';

            % Create FspTimeSlider
            app.FspTimeSlider = uislider(app.FSPTab);
            app.FspTimeSlider.Limits = [0 10];
            app.FspTimeSlider.Orientation = 'vertical';
            app.FspTimeSlider.ValueChangedFcn = createCallbackFcn(app, @UpdatePlotsButton_2Pushed, true);
            app.FspTimeSlider.ValueChangingFcn = createCallbackFcn(app, @UpdatePlotsButton_2Pushed, true);
            app.FspTimeSlider.Tooltip = {'Time slider for FSP marginal plot'};
            app.FspTimeSlider.Position = [502 336 3 163];

            % Create InitialConditionLabel
            app.InitialConditionLabel = uilabel(app.FSPTab);
            app.InitialConditionLabel.HorizontalAlignment = 'right';
            app.InitialConditionLabel.VerticalAlignment = 'bottom';
            app.InitialConditionLabel.FontWeight = 'bold';
            app.InitialConditionLabel.Position = [5 576 98 25];
            app.InitialConditionLabel.Text = 'Initial Condition';

            % Create FspConstraintTable
            app.FspConstraintTable = uitable(app.FSPTab);
            app.FspConstraintTable.ColumnName = {'Constraint'; ' '; 'Bound'};
            app.FspConstraintTable.ColumnWidth = {'auto', 12, 100};
            app.FspConstraintTable.RowName = {};
            app.FspConstraintTable.ColumnEditable = [true false true];
            app.FspConstraintTable.CellEditCallback = createCallbackFcn(app, @FspConstraintTableCellEdit, true);
            app.FspConstraintTable.Tooltip = {'Contraints for FSP solution'; ''; 'Editable bounds'};
            app.FspConstraintTable.Position = [15 172 407 300];

            % Create FspConstraintsLabel
            app.FspConstraintsLabel = uilabel(app.FSPTab);
            app.FspConstraintsLabel.VerticalAlignment = 'top';
            app.FspConstraintsLabel.FontWeight = 'bold';
            app.FspConstraintsLabel.Position = [15 477 109 26];
            app.FspConstraintsLabel.Text = 'FSP Constraints';

            % Create FspDefaultButton
            app.FspDefaultButton = uibutton(app.FSPTab, 'push');
            app.FspDefaultButton.ButtonPushedFcn = createCallbackFcn(app, @FspDefaultButtonPushed, true);
            app.FspDefaultButton.BackgroundColor = [0 1 0];
            app.FspDefaultButton.Tooltip = {'Return to default constraits'};
            app.FspDefaultButton.Position = [129 484 108 28];
            app.FspDefaultButton.Text = 'Default';

            % Create FspAddConstraintButton
            app.FspAddConstraintButton = uibutton(app.FSPTab, 'push');
            app.FspAddConstraintButton.ButtonPushedFcn = createCallbackFcn(app, @FspAddConstraintButtonPushed, true);
            app.FspAddConstraintButton.BackgroundColor = [0 1 0];
            app.FspAddConstraintButton.Tooltip = {'Add new constraint'};
            app.FspAddConstraintButton.Position = [245 484 120 28];
            app.FspAddConstraintButton.Text = 'Add Constraint';

            % Create FspSolutionAtTimeLabel
            app.FspSolutionAtTimeLabel = uilabel(app.FSPTab);
            app.FspSolutionAtTimeLabel.VerticalAlignment = 'top';
            app.FspSolutionAtTimeLabel.FontSize = 24;
            app.FspSolutionAtTimeLabel.Position = [608 542 449 48];
            app.FspSolutionAtTimeLabel.Text = 'Solutions at time: NA';

            % Create FspMarginalsPanel
            app.FspMarginalsPanel = uipanel(app.FSPTab);
            app.FspMarginalsPanel.Title = 'Marginals';
            app.FspMarginalsPanel.Position = [1004 317 157 222];

            % Create SelectSpeciesLabel
            app.SelectSpeciesLabel = uilabel(app.FspMarginalsPanel);
            app.SelectSpeciesLabel.VerticalAlignment = 'top';
            app.SelectSpeciesLabel.Position = [3 178 124 23];
            app.SelectSpeciesLabel.Text = 'Select Species';

            % Create FspPlotMarginalsButton
            app.FspPlotMarginalsButton = uibutton(app.FspMarginalsPanel, 'push');
            app.FspPlotMarginalsButton.ButtonPushedFcn = createCallbackFcn(app, @FspPlotMarginalsButtonPushed, true);
            app.FspPlotMarginalsButton.BackgroundColor = [0 1 0];
            app.FspPlotMarginalsButton.FontWeight = 'bold';
            app.FspPlotMarginalsButton.Tooltip = {'Export FSP marginal plot at current time'};
            app.FspPlotMarginalsButton.Position = [3 8 151 28];
            app.FspPlotMarginalsButton.Text = 'Plot Marginals';

            % Create SpeciestoShowListBoxMargFSP
            app.SpeciestoShowListBoxMargFSP = uilistbox(app.FspMarginalsPanel);
            app.SpeciestoShowListBoxMargFSP.Items = {'x1', 'x2', 'x3'};
            app.SpeciestoShowListBoxMargFSP.Multiselect = 'on';
            app.SpeciestoShowListBoxMargFSP.Position = [27 120 100 55];
            app.SpeciestoShowListBoxMargFSP.Value = {'x1'};

            % Create ChoosePlotsLabel
            app.ChoosePlotsLabel = uilabel(app.FSPTab);
            app.ChoosePlotsLabel.HorizontalAlignment = 'right';
            app.ChoosePlotsLabel.VerticalAlignment = 'bottom';
            app.ChoosePlotsLabel.FontSize = 24;
            app.ChoosePlotsLabel.Position = [994 556 245 44];
            app.ChoosePlotsLabel.Text = 'Choose Plots';

            % Create FspMarginalsOverTimePanel
            app.FspMarginalsOverTimePanel = uipanel(app.FSPTab);
            app.FspMarginalsOverTimePanel.Title = 'Marginals Over Time';
            app.FspMarginalsOverTimePanel.Position = [1174 317 157 222];

            % Create InputTimePointsLabel
            app.InputTimePointsLabel = uilabel(app.FspMarginalsOverTimePanel);
            app.InputTimePointsLabel.VerticalAlignment = 'top';
            app.InputTimePointsLabel.Position = [9 92 145 20];
            app.InputTimePointsLabel.Text = 'Input Time Points';

            % Create FspPlotMarginalsOverTimeButton
            app.FspPlotMarginalsOverTimeButton = uibutton(app.FspMarginalsOverTimePanel, 'push');
            app.FspPlotMarginalsOverTimeButton.ButtonPushedFcn = createCallbackFcn(app, @FspPlotMarginalsOverTimeButtonPushed, true);
            app.FspPlotMarginalsOverTimeButton.BackgroundColor = [0 1 0];
            app.FspPlotMarginalsOverTimeButton.FontWeight = 'bold';
            app.FspPlotMarginalsOverTimeButton.Tooltip = {'export marginal over time'};
            app.FspPlotMarginalsOverTimeButton.Position = [3 8 151 28];
            app.FspPlotMarginalsOverTimeButton.Text = 'Plot Marginals ';

            % Create FspMarginalVecField
            app.FspMarginalVecField = uieditfield(app.FspMarginalsOverTimePanel, 'text');
            app.FspMarginalVecField.Tooltip = {'movie time points'};
            app.FspMarginalVecField.Position = [11 70 100 22];
            app.FspMarginalVecField.Value = '[0:1:10]';

            % Create SelectSpeciesLabel_2
            app.SelectSpeciesLabel_2 = uilabel(app.FspMarginalsOverTimePanel);
            app.SelectSpeciesLabel_2.VerticalAlignment = 'top';
            app.SelectSpeciesLabel_2.Position = [3 171 114 29];
            app.SelectSpeciesLabel_2.Text = 'Select Species';

            % Create FspMarginalTimeCreateMovieCheckBox
            app.FspMarginalTimeCreateMovieCheckBox = uicheckbox(app.FspMarginalsOverTimePanel);
            app.FspMarginalTimeCreateMovieCheckBox.Text = 'Create Movie';
            app.FspMarginalTimeCreateMovieCheckBox.Position = [6 40 141 28];

            % Create SpeciestoShowListBoxMargFSPvT
            app.SpeciestoShowListBoxMargFSPvT = uilistbox(app.FspMarginalsOverTimePanel);
            app.SpeciestoShowListBoxMargFSPvT.Items = {'x1', 'x2', 'x3'};
            app.SpeciestoShowListBoxMargFSPvT.Multiselect = 'on';
            app.SpeciestoShowListBoxMargFSPvT.Position = [14 120 100 55];
            app.SpeciestoShowListBoxMargFSPvT.Value = {'x1'};

            % Create FspMeanandVariancePanel
            app.FspMeanandVariancePanel = uipanel(app.FSPTab);
            app.FspMeanandVariancePanel.Title = 'Mean and Variance';
            app.FspMeanandVariancePanel.Position = [1005 58 157 250];

            % Create SelectSpeciesLabel_3
            app.SelectSpeciesLabel_3 = uilabel(app.FspMeanandVariancePanel);
            app.SelectSpeciesLabel_3.VerticalAlignment = 'top';
            app.SelectSpeciesLabel_3.Position = [2 205 115 25];
            app.SelectSpeciesLabel_3.Text = 'Select Species';

            % Create SelectPlotsLabel_2
            app.SelectPlotsLabel_2 = uilabel(app.FspMeanandVariancePanel);
            app.SelectPlotsLabel_2.Position = [16 121 69 22];
            app.SelectPlotsLabel_2.Text = 'Select Plots';

            % Create FspMeanVarShowVarianceCheckBox
            app.FspMeanVarShowVarianceCheckBox = uicheckbox(app.FspMeanandVariancePanel);
            app.FspMeanVarShowVarianceCheckBox.Tooltip = {'select to plot standard deviations'};
            app.FspMeanVarShowVarianceCheckBox.Text = 'Show Variance';
            app.FspMeanVarShowVarianceCheckBox.Position = [16 99 135 22];

            % Create FspMeanVarPlotButton
            app.FspMeanVarPlotButton = uibutton(app.FspMeanandVariancePanel, 'push');
            app.FspMeanVarPlotButton.ButtonPushedFcn = createCallbackFcn(app, @FspMeanVarPlotButtonPushed, true);
            app.FspMeanVarPlotButton.BackgroundColor = [0 1 0];
            app.FspMeanVarPlotButton.FontWeight = 'bold';
            app.FspMeanVarPlotButton.Tooltip = {'export selected figures'};
            app.FspMeanVarPlotButton.Position = [1 43 151 28];
            app.FspMeanVarPlotButton.Text = 'Plot Mean and Variance';

            % Create FspMeanVarShowOdeCheckBox
            app.FspMeanVarShowOdeCheckBox = uicheckbox(app.FspMeanandVariancePanel);
            app.FspMeanVarShowOdeCheckBox.Tooltip = {'select to plot ODE solution'};
            app.FspMeanVarShowOdeCheckBox.Text = 'Show ODE';
            app.FspMeanVarShowOdeCheckBox.Position = [16 77 135 22];

            % Create SpeciestoShowListBoxMeans
            app.SpeciestoShowListBoxMeans = uilistbox(app.FspMeanandVariancePanel);
            app.SpeciestoShowListBoxMeans.Items = {'x1', 'x2', 'x3'};
            app.SpeciestoShowListBoxMeans.Multiselect = 'on';
            app.SpeciestoShowListBoxMeans.Position = [18 151 100 55];
            app.SpeciestoShowListBoxMeans.Value = {'x1'};

            % Create FspJointDistributionPanel
            app.FspJointDistributionPanel = uipanel(app.FSPTab);
            app.FspJointDistributionPanel.Title = 'Joint Distribution';
            app.FspJointDistributionPanel.Position = [1175 60 157 248];

            % Create SelectSpeciesLabel_4
            app.SelectSpeciesLabel_4 = uilabel(app.FspJointDistributionPanel);
            app.SelectSpeciesLabel_4.VerticalAlignment = 'top';
            app.SelectSpeciesLabel_4.Position = [3 204 126 22];
            app.SelectSpeciesLabel_4.Text = 'Select Species';

            % Create SelectPlotsLabel_3
            app.SelectPlotsLabel_3 = uilabel(app.FspJointDistributionPanel);
            app.SelectPlotsLabel_3.Position = [16 125 69 22];
            app.SelectPlotsLabel_3.Text = 'Select Plots';

            % Create FspContourCheckBox
            app.FspContourCheckBox = uicheckbox(app.FspJointDistributionPanel);
            app.FspContourCheckBox.ValueChangedFcn = createCallbackFcn(app, @FspContourCheckBoxValueChanged, true);
            app.FspContourCheckBox.Tooltip = {'select to plot contour of joint distributions'};
            app.FspContourCheckBox.Text = 'Contour';
            app.FspContourCheckBox.Position = [16 106 100 22];

            % Create FspMeshCheckBox
            app.FspMeshCheckBox = uicheckbox(app.FspJointDistributionPanel);
            app.FspMeshCheckBox.ValueChangedFcn = createCallbackFcn(app, @FspMeshCheckBoxValueChanged, true);
            app.FspMeshCheckBox.Tooltip = {'select to create mesh of joint distributions'};
            app.FspMeshCheckBox.Text = 'Mesh';
            app.FspMeshCheckBox.Position = [16 87 92 22];

            % Create PlotJointDistributionsButton
            app.PlotJointDistributionsButton = uibutton(app.FspJointDistributionPanel, 'push');
            app.PlotJointDistributionsButton.ButtonPushedFcn = createCallbackFcn(app, @PlotJointDistributionsButtonPushed, true);
            app.PlotJointDistributionsButton.BackgroundColor = [0 1 0];
            app.PlotJointDistributionsButton.FontWeight = 'bold';
            app.PlotJointDistributionsButton.Tooltip = {'export above selected plots'};
            app.PlotJointDistributionsButton.Position = [5 39 151 28];
            app.PlotJointDistributionsButton.Text = 'Plot Joint Distributions';

            % Create FspJointCreateMovCheckBox
            app.FspJointCreateMovCheckBox = uicheckbox(app.FspJointDistributionPanel);
            app.FspJointCreateMovCheckBox.Tooltip = {'select to create movie of joint distributions'};
            app.FspJointCreateMovCheckBox.Text = 'Create Movie';
            app.FspJointCreateMovCheckBox.Position = [16 69 137 22];

            % Create JointSp1
            app.JointSp1 = uilistbox(app.FspJointDistributionPanel);
            app.JointSp1.Items = {'x1', 'x2', 'x3'};
            app.JointSp1.Position = [15 150 36 55];
            app.JointSp1.Value = 'x1';

            % Create JointSp2
            app.JointSp2 = uilistbox(app.FspJointDistributionPanel);
            app.JointSp2.Items = {'x1', 'x2', 'x3'};
            app.JointSp2.Position = [93 150 36 55];
            app.JointSp2.Value = 'x1';

            % Create vsLabel
            app.vsLabel = uilabel(app.FspJointDistributionPanel);
            app.vsLabel.Position = [63 166 25 22];
            app.vsLabel.Text = 'vs.';

            % Create XminEditFieldLabel
            app.XminEditFieldLabel = uilabel(app.FSPTab);
            app.XminEditFieldLabel.HorizontalAlignment = 'right';
            app.XminEditFieldLabel.VerticalAlignment = 'bottom';
            app.XminEditFieldLabel.Position = [667 216 72 39];
            app.XminEditFieldLabel.Text = 'Xmin';

            % Create FSPXminEditField
            app.FSPXminEditField = uieditfield(app.FSPTab, 'numeric');
            app.FSPXminEditField.ValueChangedFcn = createCallbackFcn(app, @FSPXminEditFieldValueChanged, true);
            app.FSPXminEditField.Tooltip = {'Xmin for FSP marginal plot'};
            app.FSPXminEditField.Position = [746 215 48 22];

            % Create XmaxEditFieldLabel
            app.XmaxEditFieldLabel = uilabel(app.FSPTab);
            app.XmaxEditFieldLabel.HorizontalAlignment = 'right';
            app.XmaxEditFieldLabel.VerticalAlignment = 'bottom';
            app.XmaxEditFieldLabel.Position = [797 220 70 42];
            app.XmaxEditFieldLabel.Text = 'Xmax';

            % Create FSPXmaxEditField
            app.FSPXmaxEditField = uieditfield(app.FSPTab, 'numeric');
            app.FSPXmaxEditField.ValueChangedFcn = createCallbackFcn(app, @FSPXmaxEditFieldValueChanged, true);
            app.FSPXmaxEditField.Tooltip = {'Xmax for FSP marginal plot'};
            app.FSPXmaxEditField.Position = [888 218 48 22];

            % Create YminEditFieldLabel
            app.YminEditFieldLabel = uilabel(app.FSPTab);
            app.YminEditFieldLabel.HorizontalAlignment = 'right';
            app.YminEditFieldLabel.VerticalAlignment = 'bottom';
            app.YminEditFieldLabel.Position = [671 184 72 38];
            app.YminEditFieldLabel.Text = 'Ymin';

            % Create FSPYminEditField
            app.FSPYminEditField = uieditfield(app.FSPTab, 'numeric');
            app.FSPYminEditField.ValueChangedFcn = createCallbackFcn(app, @FSPYminEditFieldValueChanged, true);
            app.FSPYminEditField.Tooltip = {'Ymin for FSP marginal plot'};
            app.FSPYminEditField.Position = [750 181 48 22];

            % Create YmaxEditFieldLabel
            app.YmaxEditFieldLabel = uilabel(app.FSPTab);
            app.YmaxEditFieldLabel.HorizontalAlignment = 'right';
            app.YmaxEditFieldLabel.VerticalAlignment = 'bottom';
            app.YmaxEditFieldLabel.Position = [797 181 70 36];
            app.YmaxEditFieldLabel.Text = 'Ymax';

            % Create FSPYmaxEditField
            app.FSPYmaxEditField = uieditfield(app.FSPTab, 'numeric');
            app.FSPYmaxEditField.ValueChangedFcn = createCallbackFcn(app, @FSPYmaxEditFieldValueChanged, true);
            app.FSPYmaxEditField.Tooltip = {'Ymax for FSP marginal plot'};
            app.FSPYmaxEditField.Position = [888 181 48 22];

            % Create FspAutoExpandCheckBox
            app.FspAutoExpandCheckBox = uicheckbox(app.FSPTab);
            app.FspAutoExpandCheckBox.Text = 'Automatically Expand FSP';
            app.FspAutoExpandCheckBox.Position = [18 98 249 36];
            app.FspAutoExpandCheckBox.Value = true;

            % Create FspApproximateSteadyStateButton
            app.FspApproximateSteadyStateButton = uibutton(app.FSPTab, 'push');
            app.FspApproximateSteadyStateButton.ButtonPushedFcn = createCallbackFcn(app, @FspApproximateSteadyStateButtonPushed, true);
            app.FspApproximateSteadyStateButton.BackgroundColor = [0 1 0];
            app.FspApproximateSteadyStateButton.Enable = 'off';
            app.FspApproximateSteadyStateButton.Visible = 'off';
            app.FspApproximateSteadyStateButton.Tooltip = {'Run FSP calculation with current constraints. If no constraints'; ' runs with default constraints.'};
            app.FspApproximateSteadyStateButton.Position = [18 63 186 28];
            app.FspApproximateSteadyStateButton.Text = 'Approximate Steady State';

            % Create FspPiecewiseCheckBox
            app.FspPiecewiseCheckBox = uicheckbox(app.FSPTab);
            app.FspPiecewiseCheckBox.Text = 'Use Piecewise Constant FSP Approximation';
            app.FspPiecewiseCheckBox.Position = [18 134 445 32];

            % Create DecreaseFontSizeFsp
            app.DecreaseFontSizeFsp = uibutton(app.FSPTab, 'push');
            app.DecreaseFontSizeFsp.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeFsp.Visible = 'off';
            app.DecreaseFontSizeFsp.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeFsp.Position = [1311 599 17 22];
            app.DecreaseFontSizeFsp.Text = '-';

            % Create IncreaseFontSizeFsp
            app.IncreaseFontSizeFsp = uibutton(app.FSPTab, 'push');
            app.IncreaseFontSizeFsp.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeFsp.Visible = 'off';
            app.IncreaseFontSizeFsp.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeFsp.Position = [1274 599 17 22];
            app.IncreaseFontSizeFsp.Text = '+';

            % Create FontSizeLabel_3
            app.FontSizeLabel_3 = uilabel(app.FSPTab);
            app.FontSizeLabel_3.HorizontalAlignment = 'right';
            app.FontSizeLabel_3.VerticalAlignment = 'bottom';
            app.FontSizeLabel_3.Visible = 'off';
            app.FontSizeLabel_3.Position = [1130 599 117 34];
            app.FontSizeLabel_3.Text = {'Font Size'; ''};

            % Create ODEToleranceDropDownLabel
            app.ODEToleranceDropDownLabel = uilabel(app.FSPTab);
            app.ODEToleranceDropDownLabel.HorizontalAlignment = 'right';
            app.ODEToleranceDropDownLabel.Position = [294 140 85 22];
            app.ODEToleranceDropDownLabel.Text = 'ODE Tolerance';

            % Create FspIntegratorTolerance
            app.FspIntegratorTolerance = uidropdown(app.FSPTab);
            app.FspIntegratorTolerance.Items = {'Relaxed', 'Moderate', 'Strict'};
            app.FspIntegratorTolerance.Position = [394 140 100 22];
            app.FspIntegratorTolerance.Value = 'Relaxed';

            % Create LaunchFSPModelReductionToolButton
            app.LaunchFSPModelReductionToolButton = uibutton(app.FSPTab, 'push');
            app.LaunchFSPModelReductionToolButton.ButtonPushedFcn = createCallbackFcn(app, @LaunchFSPModelReductionToolButtonPushed, true);
            app.LaunchFSPModelReductionToolButton.BackgroundColor = [0.9294 0.6941 0.1255];
            app.LaunchFSPModelReductionToolButton.FontWeight = 'bold';
            app.LaunchFSPModelReductionToolButton.Enable = 'off';
            app.LaunchFSPModelReductionToolButton.Visible = 'off';
            app.LaunchFSPModelReductionToolButton.Position = [15 30 213 22];
            app.LaunchFSPModelReductionToolButton.Text = 'Launch FSP Model Reduction Tool';

            % Create ExportFSPDatatoWorkspaceForManualPlotsButton
            app.ExportFSPDatatoWorkspaceForManualPlotsButton = uibutton(app.FSPTab, 'push');
            app.ExportFSPDatatoWorkspaceForManualPlotsButton.ButtonPushedFcn = createCallbackFcn(app, @ExportFSPDatatoWorkspaceForManualPlotsButtonPushed, true);
            app.ExportFSPDatatoWorkspaceForManualPlotsButton.BackgroundColor = [0 1 0];
            app.ExportFSPDatatoWorkspaceForManualPlotsButton.FontWeight = 'bold';
            app.ExportFSPDatatoWorkspaceForManualPlotsButton.Position = [1018 22 296 22];
            app.ExportFSPDatatoWorkspaceForManualPlotsButton.Text = 'Export FSP Data to Workspace For Manual Plots';

            % Create SpeciestoShowListBox_2Label
            app.SpeciestoShowListBox_2Label = uilabel(app.FSPTab);
            app.SpeciestoShowListBox_2Label.HorizontalAlignment = 'right';
            app.SpeciestoShowListBox_2Label.Position = [504 223 96 22];
            app.SpeciestoShowListBox_2Label.Text = 'Species to Show';

            % Create SpeciestoShowListBox_2
            app.SpeciestoShowListBox_2 = uilistbox(app.FSPTab);
            app.SpeciestoShowListBox_2.Items = {'x1', 'x2', 'x3'};
            app.SpeciestoShowListBox_2.Multiselect = 'on';
            app.SpeciestoShowListBox_2.ValueChangedFcn = createCallbackFcn(app, @UpdatePlotsButton_2Pushed, true);
            app.SpeciestoShowListBox_2.Position = [528 147 100 74];
            app.SpeciestoShowListBox_2.Value = {'x1'};

            % Create initApproxSS
            app.initApproxSS = uicheckbox(app.FSPTab);
            app.initApproxSS.Text = 'Use Steady State as Initial Condition';
            app.initApproxSS.Position = [48 547 219 22];

            % Create SensitivityTab
            app.SensitivityTab = uitab(app.TabGroup);
            app.SensitivityTab.Tooltip = {'Use this tab to perform sensitivity analysis with respect to model parameters.'};
            app.SensitivityTab.Title = 'Sensitivity';

            % Create SensProbAxes
            app.SensProbAxes = uiaxes(app.SensitivityTab);
            title(app.SensProbAxes, 'Marginals')
            xlabel(app.SensProbAxes, 'Species Count')
            ylabel(app.SensProbAxes, 'Probability')
            app.SensProbAxes.PlotBoxAspectRatio = [1.98076923076923 1 1];
            app.SensProbAxes.Position = [581 380 383 241];

            % Create SensDerivativeAxes
            app.SensDerivativeAxes = uiaxes(app.SensitivityTab);
            title(app.SensDerivativeAxes, 'Sensitivity')
            xlabel(app.SensDerivativeAxes, 'Species Count')
            ylabel(app.SensDerivativeAxes, 'Sensitivity')
            app.SensDerivativeAxes.PlotBoxAspectRatio = [1.98076923076923 1 1];
            app.SensDerivativeAxes.Position = [581 110 383 241];

            % Create SelectAnalysisTypeforSensitivityButtonGroup
            app.SelectAnalysisTypeforSensitivityButtonGroup = uibuttongroup(app.SensitivityTab);
            app.SelectAnalysisTypeforSensitivityButtonGroup.TitlePosition = 'centertop';
            app.SelectAnalysisTypeforSensitivityButtonGroup.Title = 'Select Analysis Type for Sensitivity';
            app.SelectAnalysisTypeforSensitivityButtonGroup.Position = [29 560 321 68];

            % Create SensitivityFunctionButton
            app.SensitivityFunctionButton = uitogglebutton(app.SelectAnalysisTypeforSensitivityButtonGroup);
            app.SensitivityFunctionButton.Text = 'Sensitivity Function';
            app.SensitivityFunctionButton.Position = [8 15 142 22];
            app.SensitivityFunctionButton.Value = true;

            % Create FiniteDifferenceButton
            app.FiniteDifferenceButton = uitogglebutton(app.SelectAnalysisTypeforSensitivityButtonGroup);
            app.FiniteDifferenceButton.Text = 'Finite Difference';
            app.FiniteDifferenceButton.Position = [167 15 143 22];

            % Create SensParameterSelectionTable
            app.SensParameterSelectionTable = uitable(app.SensitivityTab);
            app.SensParameterSelectionTable.ColumnName = {'Parameter'; 'Value'; 'Include? (y/n)'};
            app.SensParameterSelectionTable.RowName = {};
            app.SensParameterSelectionTable.ColumnEditable = [false true true];
            app.SensParameterSelectionTable.CellEditCallback = createCallbackFcn(app, @SensParameterSelectionTableCellEdit, true);
            app.SensParameterSelectionTable.Position = [29 192 321 335];

            % Create SelectParameterstobeIncludedinSensitivityAnalysisLabel
            app.SelectParameterstobeIncludedinSensitivityAnalysisLabel = uilabel(app.SensitivityTab);
            app.SelectParameterstobeIncludedinSensitivityAnalysisLabel.VerticalAlignment = 'top';
            app.SelectParameterstobeIncludedinSensitivityAnalysisLabel.Position = [29 526 336 29];
            app.SelectParameterstobeIncludedinSensitivityAnalysisLabel.Text = 'Select Parameters to be Included in Sensitivity Analysis';

            % Create NoteforValuesTextArea
            app.NoteforValuesTextArea = uitextarea(app.SensitivityTab);
            app.NoteforValuesTextArea.Editable = 'off';
            app.NoteforValuesTextArea.Position = [30 148 321 39];
            app.NoteforValuesTextArea.Value = {'Changes in values here only effect the Sensitivity Analysis.'};

            % Create SensInitCondField
            app.SensInitCondField = uieditfield(app.SensitivityTab, 'text');
            app.SensInitCondField.ValueChangedFcn = createCallbackFcn(app, @SsaInitCondFieldValueChanged, true);
            app.SensInitCondField.HorizontalAlignment = 'right';
            app.SensInitCondField.Position = [465 563 100 22];
            app.SensInitCondField.Value = '[1,0,0]';

            % Create InitialConditionLabel_2
            app.InitialConditionLabel_2 = uilabel(app.SensitivityTab);
            app.InitialConditionLabel_2.HorizontalAlignment = 'right';
            app.InitialConditionLabel_2.VerticalAlignment = 'bottom';
            app.InitialConditionLabel_2.Position = [336 567 117 28];
            app.InitialConditionLabel_2.Text = 'Initial Condition';

            % Create ErrorToleranceEditField_2Label
            app.ErrorToleranceEditField_2Label = uilabel(app.SensitivityTab);
            app.ErrorToleranceEditField_2Label.HorizontalAlignment = 'right';
            app.ErrorToleranceEditField_2Label.VerticalAlignment = 'bottom';
            app.ErrorToleranceEditField_2Label.Position = [336 603 114 27];
            app.ErrorToleranceEditField_2Label.Text = 'Error Tolerance';

            % Create SensErrorTolEditField
            app.SensErrorTolEditField = uieditfield(app.SensitivityTab, 'numeric');
            app.SensErrorTolEditField.Position = [465 599 100 22];
            app.SensErrorTolEditField.Value = 0.001;

            % Create PrintTimesEditField_3Label
            app.PrintTimesEditField_3Label = uilabel(app.SensitivityTab);
            app.PrintTimesEditField_3Label.HorizontalAlignment = 'right';
            app.PrintTimesEditField_3Label.VerticalAlignment = 'bottom';
            app.PrintTimesEditField_3Label.Position = [349 527 102 30];
            app.PrintTimesEditField_3Label.Text = 'Print Times';

            % Create SensPrintTimesEditField
            app.SensPrintTimesEditField = uieditfield(app.SensitivityTab, 'text');
            app.SensPrintTimesEditField.ValueChangedFcn = createCallbackFcn(app, @SensPrintTimesEditFieldValueChanged, true);
            app.SensPrintTimesEditField.HorizontalAlignment = 'right';
            app.SensPrintTimesEditField.Position = [465 523 101 22];
            app.SensPrintTimesEditField.Value = '[0:0.1:10]';

            % Create TimeSelectorSliderLabel
            app.TimeSelectorSliderLabel = uilabel(app.SensitivityTab);
            app.TimeSelectorSliderLabel.HorizontalAlignment = 'right';
            app.TimeSelectorSliderLabel.VerticalAlignment = 'bottom';
            app.TimeSelectorSliderLabel.Position = [385 357 120 49];
            app.TimeSelectorSliderLabel.Text = 'Time Selector';

            % Create SensPlotTimeSlider
            app.SensPlotTimeSlider = uislider(app.SensitivityTab);
            app.SensPlotTimeSlider.Limits = [0 10];
            app.SensPlotTimeSlider.Orientation = 'vertical';
            app.SensPlotTimeSlider.ValueChangedFcn = createCallbackFcn(app, @SensPlotTimeSliderValueChanged, true);
            app.SensPlotTimeSlider.Position = [518 290 3 163];

            % Create SensRunButton
            app.SensRunButton = uibutton(app.SensitivityTab, 'push');
            app.SensRunButton.ButtonPushedFcn = createCallbackFcn(app, @SensRunButtonPushed, true);
            app.SensRunButton.BackgroundColor = [0 1 0];
            app.SensRunButton.Position = [450 464 110 28];
            app.SensRunButton.Text = 'Run Sensitivity';

            % Create DisplaySpeciesPanel
            app.DisplaySpeciesPanel = uipanel(app.SensitivityTab);
            app.DisplaySpeciesPanel.Title = 'Display Species';
            app.DisplaySpeciesPanel.Position = [437 164 133 101];

            % Create SpeciesForSensPlot
            app.SpeciesForSensPlot = uilistbox(app.DisplaySpeciesPanel);
            app.SpeciesForSensPlot.Items = {'x1', 'x2', 'x3'};
            app.SpeciesForSensPlot.Multiselect = 'on';
            app.SpeciesForSensPlot.ValueChangedFcn = createCallbackFcn(app, @SensPlotTimeSliderValueChanged, true);
            app.SpeciesForSensPlot.Position = [20 11 100 55];
            app.SpeciesForSensPlot.Value = {'x1'};

            % Create withrespecttoparameterDropDownLabel
            app.withrespecttoparameterDropDownLabel = uilabel(app.SensitivityTab);
            app.withrespecttoparameterDropDownLabel.HorizontalAlignment = 'right';
            app.withrespecttoparameterDropDownLabel.VerticalAlignment = 'bottom';
            app.withrespecttoparameterDropDownLabel.Position = [377 143 188 26];
            app.withrespecttoparameterDropDownLabel.Text = 'with respect to parameter';

            % Create SensParDropDown
            app.SensParDropDown = uidropdown(app.SensitivityTab);
            app.SensParDropDown.ItemsData = {'1, 2, 3, 4'};
            app.SensParDropDown.ValueChangedFcn = createCallbackFcn(app, @SensParDropDownValueChanged, true);
            app.SensParDropDown.Position = [470 116 100 22];
            app.SensParDropDown.Value = '1, 2, 3, 4';

            % Create DecreaseFontSizeSens
            app.DecreaseFontSizeSens = uibutton(app.SensitivityTab, 'push');
            app.DecreaseFontSizeSens.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeSens.Visible = 'off';
            app.DecreaseFontSizeSens.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeSens.Position = [1314 599 17 22];
            app.DecreaseFontSizeSens.Text = '-';

            % Create IncreaseFontSizeSens
            app.IncreaseFontSizeSens = uibutton(app.SensitivityTab, 'push');
            app.IncreaseFontSizeSens.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeSens.Visible = 'off';
            app.IncreaseFontSizeSens.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeSens.Position = [1274 599 17 22];
            app.IncreaseFontSizeSens.Text = '+';

            % Create FontSizeLabel_4
            app.FontSizeLabel_4 = uilabel(app.SensitivityTab);
            app.FontSizeLabel_4.HorizontalAlignment = 'right';
            app.FontSizeLabel_4.VerticalAlignment = 'bottom';
            app.FontSizeLabel_4.Visible = 'off';
            app.FontSizeLabel_4.Position = [1130 599 117 34];
            app.FontSizeLabel_4.Text = {'Font Size'; ''};

            % Create ExportSensitivityDatatoWorkspaceForManualPlotsButton
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton = uibutton(app.SensitivityTab, 'push');
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton.ButtonPushedFcn = createCallbackFcn(app, @ExportSensitivityDatatoWorkspaceForManualPlotsButtonPushed, true);
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton.BackgroundColor = [0 1 0];
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton.FontWeight = 'bold';
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton.Position = [607 68 333 22];
            app.ExportSensitivityDatatoWorkspaceForManualPlotsButton.Text = 'Export Sensitivity Data to Workspace For Manual Plots';

            % Create FisherInformationTab
            app.FisherInformationTab = uitab(app.TabGroup);
            app.FisherInformationTab.Title = 'Fisher Information';

            % Create plotFIMvsTime
            app.plotFIMvsTime = uiaxes(app.FisherInformationTab);
            title(app.plotFIMvsTime, 'Information versus measurement time.')
            xlabel(app.plotFIMvsTime, 'Time')
            ylabel(app.plotFIMvsTime, 'Information')
            zlabel(app.plotFIMvsTime, 'Z')
            app.plotFIMvsTime.Position = [57 34 499 344];

            % Create FIMEllipseAxes
            app.FIMEllipseAxes = uiaxes(app.FisherInformationTab);
            title(app.FIMEllipseAxes, 'Expected MLE Joint Uncertainty')
            zlabel(app.FIMEllipseAxes, 'Z')
            app.FIMEllipseAxes.Position = [851 62 499 344];

            % Create DecreaseFontSizeData_2
            app.DecreaseFontSizeData_2 = uibutton(app.FisherInformationTab, 'push');
            app.DecreaseFontSizeData_2.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeData_2.Visible = 'off';
            app.DecreaseFontSizeData_2.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeData_2.Position = [1314 599 17 22];
            app.DecreaseFontSizeData_2.Text = '-';

            % Create IncreaseFontSizeData_2
            app.IncreaseFontSizeData_2 = uibutton(app.FisherInformationTab, 'push');
            app.IncreaseFontSizeData_2.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeData_2.Visible = 'off';
            app.IncreaseFontSizeData_2.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeData_2.Position = [1274 599 17 22];
            app.IncreaseFontSizeData_2.Text = '+';

            % Create FontSizeLabel_8
            app.FontSizeLabel_8 = uilabel(app.FisherInformationTab);
            app.FontSizeLabel_8.HorizontalAlignment = 'right';
            app.FontSizeLabel_8.VerticalAlignment = 'bottom';
            app.FontSizeLabel_8.Visible = 'off';
            app.FontSizeLabel_8.Position = [1130 599 117 34];
            app.FontSizeLabel_8.Text = {'Font Size'; ''};

            % Create ListofMeasurementTimesEditFieldLabel
            app.ListofMeasurementTimesEditFieldLabel = uilabel(app.FisherInformationTab);
            app.ListofMeasurementTimesEditFieldLabel.HorizontalAlignment = 'right';
            app.ListofMeasurementTimesEditFieldLabel.FontWeight = 'bold';
            app.ListofMeasurementTimesEditFieldLabel.Position = [2 560 161 22];
            app.ListofMeasurementTimesEditFieldLabel.Text = 'List of Measurement Times';

            % Create ListofMeasurementTimesEditField
            app.ListofMeasurementTimesEditField = uieditfield(app.FisherInformationTab, 'text');
            app.ListofMeasurementTimesEditField.ValueChangedFcn = createCallbackFcn(app, @SensPrintTimesEditFieldValueChanged, true);
            app.ListofMeasurementTimesEditField.FontWeight = 'bold';
            app.ListofMeasurementTimesEditField.Position = [178 560 100 22];
            app.ListofMeasurementTimesEditField.Value = '[0:0.1:10]';

            % Create AddProbabilisticDistortionEffectsButton
            app.AddProbabilisticDistortionEffectsButton = uibutton(app.FisherInformationTab, 'push');
            app.AddProbabilisticDistortionEffectsButton.ButtonPushedFcn = createCallbackFcn(app, @AddProbabilisticDistortionEffectsButtonPushed, true);
            app.AddProbabilisticDistortionEffectsButton.FontWeight = 'bold';
            app.AddProbabilisticDistortionEffectsButton.Enable = 'off';
            app.AddProbabilisticDistortionEffectsButton.Visible = 'off';
            app.AddProbabilisticDistortionEffectsButton.Position = [9 468 217 23];
            app.AddProbabilisticDistortionEffectsButton.Text = 'Add Probabilistic Distortion Effects';

            % Create NoneLabel
            app.NoneLabel = uilabel(app.FisherInformationTab);
            app.NoneLabel.Visible = 'off';
            app.NoneLabel.Position = [230 469 42 22];
            app.NoneLabel.Text = '- None';

            % Create FIMMetricorParameterDropDownLabel
            app.FIMMetricorParameterDropDownLabel = uilabel(app.FisherInformationTab);
            app.FIMMetricorParameterDropDownLabel.HorizontalAlignment = 'right';
            app.FIMMetricorParameterDropDownLabel.FontWeight = 'bold';
            app.FIMMetricorParameterDropDownLabel.Position = [6 435 153 22];
            app.FIMMetricorParameterDropDownLabel.Text = 'FIM Metric (or Parameter)';

            % Create FIMMetricorParameterDropDown
            app.FIMMetricorParameterDropDown = uidropdown(app.FisherInformationTab);
            app.FIMMetricorParameterDropDown.Items = {'Determinant', 'Smallest Eigenvalue', 'Trace'};
            app.FIMMetricorParameterDropDown.ValueChangedFcn = createCallbackFcn(app, @ComputeFIMandPlotInformationvsTimeButtonPushed, true);
            app.FIMMetricorParameterDropDown.Position = [172 433 220 22];
            app.FIMMetricorParameterDropDown.Value = 'Determinant';

            % Create ObservableSpeciesListBoxLabel
            app.ObservableSpeciesListBoxLabel = uilabel(app.FisherInformationTab);
            app.ObservableSpeciesListBoxLabel.HorizontalAlignment = 'right';
            app.ObservableSpeciesListBoxLabel.FontWeight = 'bold';
            app.ObservableSpeciesListBoxLabel.Position = [9 530 119 22];
            app.ObservableSpeciesListBoxLabel.Text = 'Observable Species';

            % Create ObservableSpeciesListBox
            app.ObservableSpeciesListBox = uilistbox(app.FisherInformationTab);
            app.ObservableSpeciesListBox.Items = {'x1', 'x2', 'x3'};
            app.ObservableSpeciesListBox.Multiselect = 'on';
            app.ObservableSpeciesListBox.FontWeight = 'bold';
            app.ObservableSpeciesListBox.Position = [143 496 100 58];
            app.ObservableSpeciesListBox.Value = {'x1'};

            % Create ManuallyAllocateMeasurementsperTimePointButton
            app.ManuallyAllocateMeasurementsperTimePointButton = uibutton(app.FisherInformationTab, 'push');
            app.ManuallyAllocateMeasurementsperTimePointButton.ButtonPushedFcn = createCallbackFcn(app, @ManuallyAllocateMeasurementsperTimePointButtonPushed, true);
            app.ManuallyAllocateMeasurementsperTimePointButton.BackgroundColor = [1 1 0];
            app.ManuallyAllocateMeasurementsperTimePointButton.FontWeight = 'bold';
            app.ManuallyAllocateMeasurementsperTimePointButton.Position = [825 453 296 23];
            app.ManuallyAllocateMeasurementsperTimePointButton.Text = 'Manually Allocate Measurements per Time Point';

            % Create orLabel
            app.orLabel = uilabel(app.FisherInformationTab);
            app.orLabel.Position = [868 421 25 22];
            app.orLabel.Text = 'or';

            % Create OptimizeButton_2
            app.OptimizeButton_2 = uibutton(app.FisherInformationTab, 'push');
            app.OptimizeButton_2.ButtonPushedFcn = createCallbackFcn(app, @OptimizeButton_2Pushed, true);
            app.OptimizeButton_2.BackgroundColor = [1 1 0];
            app.OptimizeButton_2.FontWeight = 'bold';
            app.OptimizeButton_2.Position = [883 422 67 23];
            app.OptimizeButton_2.Text = 'Optimize';

            % Create foratotalofLabel
            app.foratotalofLabel = uilabel(app.FisherInformationTab);
            app.foratotalofLabel.FontWeight = 'bold';
            app.foratotalofLabel.Position = [957 423 75 22];
            app.foratotalofLabel.Text = 'for a total of';

            % Create CellsEditFieldLabel
            app.CellsEditFieldLabel = uilabel(app.FisherInformationTab);
            app.CellsEditFieldLabel.HorizontalAlignment = 'right';
            app.CellsEditFieldLabel.FontWeight = 'bold';
            app.CellsEditFieldLabel.Position = [1084 423 34 22];
            app.CellsEditFieldLabel.Text = 'Cells';

            % Create CellsEditField
            app.CellsEditField = uieditfield(app.FisherInformationTab, 'numeric');
            app.CellsEditField.Limits = [1 Inf];
            app.CellsEditField.FontWeight = 'bold';
            app.CellsEditField.Position = [1033 423 50 22];
            app.CellsEditField.Value = 1000;

            % Create FIMParameter1
            app.FIMParameter1 = uidropdown(app.FisherInformationTab);
            app.FIMParameter1.ValueChangedFcn = createCallbackFcn(app, @EstimateMLEUncertaintyButtonPushed, true);
            app.FIMParameter1.Position = [1067 30 100 22];

            % Create FIMParameter2
            app.FIMParameter2 = uidropdown(app.FisherInformationTab);
            app.FIMParameter2.ValueChangedFcn = createCallbackFcn(app, @EstimateMLEUncertaintyButtonPushed, true);
            app.FIMParameter2.Position = [738 213 100 22];

            % Create EstimateFisherInformationLabel
            app.EstimateFisherInformationLabel = uilabel(app.FisherInformationTab);
            app.EstimateFisherInformationLabel.FontSize = 16;
            app.EstimateFisherInformationLabel.FontWeight = 'bold';
            app.EstimateFisherInformationLabel.Position = [6 594 218 22];
            app.EstimateFisherInformationLabel.Text = 'Estimate Fisher Information';

            % Create Label
            app.Label = uilabel(app.FisherInformationTab);
            app.Label.FontSize = 16;
            app.Label.FontWeight = 'bold';
            app.Label.Position = [336 594 25 22];
            app.Label.Text = '';

            % Create ParametersLabel_2
            app.ParametersLabel_2 = uilabel(app.FisherInformationTab);
            app.ParametersLabel_2.FontSize = 16;
            app.ParametersLabel_2.FontWeight = 'bold';
            app.ParametersLabel_2.Position = [326 596 94 22];
            app.ParametersLabel_2.Text = 'Parameters';

            % Create SpecifyPriorButton
            app.SpecifyPriorButton = uibutton(app.FisherInformationTab, 'push');
            app.SpecifyPriorButton.ButtonPushedFcn = createCallbackFcn(app, @SpecifyPriorButtonPushed, true);
            app.SpecifyPriorButton.BackgroundColor = [1 1 0];
            app.SpecifyPriorButton.Enable = 'off';
            app.SpecifyPriorButton.Position = [461 535 100 22];
            app.SpecifyPriorButton.Text = 'Specify Prior';

            % Create PlotInformationvsTimeButton
            app.PlotInformationvsTimeButton = uibutton(app.FisherInformationTab, 'push');
            app.PlotInformationvsTimeButton.ButtonPushedFcn = createCallbackFcn(app, @ComputeFIMandPlotInformationvsTimeButtonPushed, true);
            app.PlotInformationvsTimeButton.BackgroundColor = [0 1 0];
            app.PlotInformationvsTimeButton.FontWeight = 'bold';
            app.PlotInformationvsTimeButton.Tooltip = {'This will plot the chosen FIM metric versus time. Note that for many experiments the FIM may not be invertible.'};
            app.PlotInformationvsTimeButton.Position = [324 387 159 23];
            app.PlotInformationvsTimeButton.Text = 'Plot Information vs. Time';

            % Create EstimateMLEUncertaintyButton
            app.EstimateMLEUncertaintyButton = uibutton(app.FisherInformationTab, 'push');
            app.EstimateMLEUncertaintyButton.ButtonPushedFcn = createCallbackFcn(app, @EstimateMLEUncertaintyButtonPushed, true);
            app.EstimateMLEUncertaintyButton.BackgroundColor = [0 1 0];
            app.EstimateMLEUncertaintyButton.FontWeight = 'bold';
            app.EstimateMLEUncertaintyButton.Position = [1150 439 165 23];
            app.EstimateMLEUncertaintyButton.Text = 'Estimate MLE Uncertainty';

            % Create FIMLogTransformCheckBox
            app.FIMLogTransformCheckBox = uicheckbox(app.FisherInformationTab);
            app.FIMLogTransformCheckBox.ValueChangedFcn = createCallbackFcn(app, @EstimateMLEUncertaintyButtonPushed, true);
            app.FIMLogTransformCheckBox.Text = 'Show COV in Log Space';
            app.FIMLogTransformCheckBox.Position = [1192 418 155 22];

            % Create PlotStlyeDropDownLabel
            app.PlotStlyeDropDownLabel = uilabel(app.FisherInformationTab);
            app.PlotStlyeDropDownLabel.HorizontalAlignment = 'right';
            app.PlotStlyeDropDownLabel.Position = [44 390 57 22];
            app.PlotStlyeDropDownLabel.Text = 'Plot Stlye';

            % Create PlotStlyeDropDown
            app.PlotStlyeDropDown = uidropdown(app.FisherInformationTab);
            app.PlotStlyeDropDown.Items = {'Information vs. time', 'New Information vs. time'};
            app.PlotStlyeDropDown.ValueChangedFcn = createCallbackFcn(app, @PlotStlyeDropDownValueChanged, true);
            app.PlotStlyeDropDown.Position = [115 389 184 22];
            app.PlotStlyeDropDown.Value = 'New Information vs. time';

            % Create NumberMCSamplesoverPriorEditFieldLabel
            app.NumberMCSamplesoverPriorEditFieldLabel = uilabel(app.FisherInformationTab);
            app.NumberMCSamplesoverPriorEditFieldLabel.HorizontalAlignment = 'right';
            app.NumberMCSamplesoverPriorEditFieldLabel.Position = [360 505 176 22];
            app.NumberMCSamplesoverPriorEditFieldLabel.Text = 'Number MC Samples over Prior';

            % Create FIMNumMC
            app.FIMNumMC = uieditfield(app.FisherInformationTab, 'numeric');
            app.FIMNumMC.Limits = [1 1000];
            app.FIMNumMC.RoundFractionalValues = 'on';
            app.FIMNumMC.Editable = 'off';
            app.FIMNumMC.Enable = 'off';
            app.FIMNumMC.Tooltip = {'Enter the number of Monte Carlos to use when sampling over the prior. Note that the sensitivity calculation will need to be solved once for each sample.'};
            app.FIMNumMC.Position = [551 505 100 22];
            app.FIMNumMC.Value = 10;

            % Create ModelUncertaintyDropDownLabel
            app.ModelUncertaintyDropDownLabel = uilabel(app.FisherInformationTab);
            app.ModelUncertaintyDropDownLabel.HorizontalAlignment = 'right';
            app.ModelUncertaintyDropDownLabel.Position = [348 566 104 22];
            app.ModelUncertaintyDropDownLabel.Text = 'Model Uncertainty';

            % Create ModelUncertaintyDropDown
            app.ModelUncertaintyDropDown = uidropdown(app.FisherInformationTab);
            app.ModelUncertaintyDropDown.Items = {'Use Fixed Model', 'MC Sample Over Prior'};
            app.ModelUncertaintyDropDown.ValueChangedFcn = createCallbackFcn(app, @ModelUncertaintyDropDownValueChanged, true);
            app.ModelUncertaintyDropDown.Position = [460 565 193 22];
            app.ModelUncertaintyDropDown.Value = 'Use Fixed Model';

            % Create DistortionsLabel
            app.DistortionsLabel = uilabel(app.FisherInformationTab);
            app.DistortionsLabel.FontSize = 16;
            app.DistortionsLabel.FontWeight = 'bold';
            app.DistortionsLabel.Visible = 'off';
            app.DistortionsLabel.Position = [702 594 89 22];
            app.DistortionsLabel.Text = 'Distortions';

            % Create DistortionTypeDropDownLabel
            app.DistortionTypeDropDownLabel = uilabel(app.FisherInformationTab);
            app.DistortionTypeDropDownLabel.HorizontalAlignment = 'right';
            app.DistortionTypeDropDownLabel.Visible = 'off';
            app.DistortionTypeDropDownLabel.Position = [707 563 86 22];
            app.DistortionTypeDropDownLabel.Text = 'Distortion Type';

            % Create DistortionTypeDropDown
            app.DistortionTypeDropDown = uidropdown(app.FisherInformationTab);
            app.DistortionTypeDropDown.Items = {'None', 'Binomial', 'Binomial - State Dependent', 'Binomial - Parametrized', 'Poisson', 'Poisson - State Dependent', 'Poisson - Parametrized', 'Binning', 'Custom Function'};
            app.DistortionTypeDropDown.ValueChangedFcn = createCallbackFcn(app, @DistortionTypeDropDownValueChanged, true);
            app.DistortionTypeDropDown.Visible = 'off';
            app.DistortionTypeDropDown.Position = [808 563 241 22];
            app.DistortionTypeDropDown.Value = 'None';

            % Create SetDistortionParametersButton
            app.SetDistortionParametersButton = uibutton(app.FisherInformationTab, 'push');
            app.SetDistortionParametersButton.ButtonPushedFcn = createCallbackFcn(app, @SetDistortionParametersButtonPushed, true);
            app.SetDistortionParametersButton.BackgroundColor = [1 1 0];
            app.SetDistortionParametersButton.Enable = 'off';
            app.SetDistortionParametersButton.Visible = 'off';
            app.SetDistortionParametersButton.Position = [763 534 154 22];
            app.SetDistortionParametersButton.Text = 'Set Distortion Parameters';

            % Create ShowDistortionPlotButton
            app.ShowDistortionPlotButton = uibutton(app.FisherInformationTab, 'push');
            app.ShowDistortionPlotButton.ButtonPushedFcn = createCallbackFcn(app, @ShowDistortionPlotButtonPushed, true);
            app.ShowDistortionPlotButton.BackgroundColor = [1 1 0];
            app.ShowDistortionPlotButton.Enable = 'off';
            app.ShowDistortionPlotButton.Visible = 'off';
            app.ShowDistortionPlotButton.Position = [926 534 125 22];
            app.ShowDistortionPlotButton.Text = 'Show Distortion Plot';

            % Create HoldOnCheckBox
            app.HoldOnCheckBox = uicheckbox(app.FisherInformationTab);
            app.HoldOnCheckBox.ValueChangedFcn = createCallbackFcn(app, @HoldOnCheckBoxValueChanged, true);
            app.HoldOnCheckBox.Text = 'Hold On';
            app.HoldOnCheckBox.Position = [500 387 66 22];

            % Create DataLoadingandFittingTab
            app.DataLoadingandFittingTab = uitab(app.TabGroup);
            app.DataLoadingandFittingTab.Tooltip = {'Use this tab to load experimental data and attempt to fit your model to these data.'};
            app.DataLoadingandFittingTab.Title = 'Data Loading and Fitting';

            % Create LoadPreviousProjectButton
            app.LoadPreviousProjectButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.LoadPreviousProjectButton.ButtonPushedFcn = createCallbackFcn(app, @ModelLoadButtonPushed, true);
            app.LoadPreviousProjectButton.BackgroundColor = [0 1 0];
            app.LoadPreviousProjectButton.FontWeight = 'bold';
            app.LoadPreviousProjectButton.Position = [15 592 142 28];
            app.LoadPreviousProjectButton.Text = 'Load Previous Project';

            % Create loadapreviouscombinationLabel
            app.loadapreviouscombinationLabel = uilabel(app.DataLoadingandFittingTab);
            app.loadapreviouscombinationLabel.VerticalAlignment = 'top';
            app.loadapreviouscombinationLabel.Position = [163 594 202 22];
            app.loadapreviouscombinationLabel.Text = '<-- load a previous combination';

            % Create LoadandConstrainDataButton
            app.LoadandConstrainDataButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.LoadandConstrainDataButton.ButtonPushedFcn = createCallbackFcn(app, @LoadandConstrainDataButtonPushed, true);
            app.LoadandConstrainDataButton.BackgroundColor = [0 1 0];
            app.LoadandConstrainDataButton.FontWeight = 'bold';
            app.LoadandConstrainDataButton.Position = [281 116 161 28];
            app.LoadandConstrainDataButton.Text = 'Load and Constrain Data ';

            % Create fit_parameters_table
            app.fit_parameters_table = uitable(app.DataLoadingandFittingTab);
            app.fit_parameters_table.ColumnName = {'Name'; 'Value'; 'Fit? (y/n)'};
            app.fit_parameters_table.ColumnWidth = {75, 'auto'};
            app.fit_parameters_table.RowName = {};
            app.fit_parameters_table.ColumnEditable = [false true true];
            app.fit_parameters_table.Position = [676 89 298 509];

            % Create DecreaseFontSizeData
            app.DecreaseFontSizeData = uibutton(app.DataLoadingandFittingTab, 'push');
            app.DecreaseFontSizeData.ButtonPushedFcn = createCallbackFcn(app, @DecreaseFontRxnPushed, true);
            app.DecreaseFontSizeData.Visible = 'off';
            app.DecreaseFontSizeData.Tooltip = {'Decrease global font size'};
            app.DecreaseFontSizeData.Position = [1314 599 17 22];
            app.DecreaseFontSizeData.Text = '-';

            % Create IncreaseFontSizeData
            app.IncreaseFontSizeData = uibutton(app.DataLoadingandFittingTab, 'push');
            app.IncreaseFontSizeData.ButtonPushedFcn = createCallbackFcn(app, @IncreaseFontRxnPushed, true);
            app.IncreaseFontSizeData.Visible = 'off';
            app.IncreaseFontSizeData.Tooltip = {'Increase global font size'};
            app.IncreaseFontSizeData.Position = [1274 599 17 22];
            app.IncreaseFontSizeData.Text = '+';

            % Create FontSizeLabel_6
            app.FontSizeLabel_6 = uilabel(app.DataLoadingandFittingTab);
            app.FontSizeLabel_6.HorizontalAlignment = 'right';
            app.FontSizeLabel_6.VerticalAlignment = 'bottom';
            app.FontSizeLabel_6.Visible = 'off';
            app.FontSizeLabel_6.Position = [1130 599 117 34];
            app.FontSizeLabel_6.Text = {'Font Size'; ''};

            % Create SpeciestoshowinplotsPanel
            app.SpeciestoshowinplotsPanel = uipanel(app.DataLoadingandFittingTab);
            app.SpeciestoshowinplotsPanel.Title = 'Species to show in plots';
            app.SpeciestoshowinplotsPanel.Visible = 'off';
            app.SpeciestoshowinplotsPanel.FontWeight = 'bold';
            app.SpeciestoshowinplotsPanel.Position = [1021 313 167 100];

            % Create SpeciesForFitPlot
            app.SpeciesForFitPlot = uilistbox(app.SpeciestoshowinplotsPanel);
            app.SpeciesForFitPlot.Items = {'x1', 'x2', 'x3'};
            app.SpeciesForFitPlot.Multiselect = 'on';
            app.SpeciesForFitPlot.Position = [31 15 100 55];
            app.SpeciesForFitPlot.Value = {'x1'};

            % Create DataLoadingPanel
            app.DataLoadingPanel = uipanel(app.DataLoadingandFittingTab);
            app.DataLoadingPanel.Title = 'Data Loading ';
            app.DataLoadingPanel.FontWeight = 'bold';
            app.DataLoadingPanel.Position = [15 474 229 69];

            % Create ParEstLoadDataButton
            app.ParEstLoadDataButton = uibutton(app.DataLoadingPanel, 'push');
            app.ParEstLoadDataButton.ButtonPushedFcn = createCallbackFcn(app, @ParEstLoadDataButtonPushed, true);
            app.ParEstLoadDataButton.BackgroundColor = [0 1 0];
            app.ParEstLoadDataButton.FontWeight = 'bold';
            app.ParEstLoadDataButton.Position = [3 14 100 28];
            app.ParEstLoadDataButton.Text = 'Load Data';

            % Create TimesforFITTINGLabel
            app.TimesforFITTINGLabel = uilabel(app.DataLoadingandFittingTab);
            app.TimesforFITTINGLabel.HorizontalAlignment = 'right';
            app.TimesforFITTINGLabel.FontWeight = 'bold';
            app.TimesforFITTINGLabel.Position = [17 108 110 22];
            app.TimesforFITTINGLabel.Text = 'Times for FITTING';

            % Create ParEstFitTimesList
            app.ParEstFitTimesList = uilistbox(app.DataLoadingandFittingTab);
            app.ParEstFitTimesList.Multiselect = 'on';
            app.ParEstFitTimesList.ValueChangedFcn = createCallbackFcn(app, @ParEstFitTimesListValueChanged, true);
            app.ParEstFitTimesList.Position = [142 11 100 121];
            app.ParEstFitTimesList.Value = {'Item 1'};

            % Create selectallButton
            app.selectallButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.selectallButton.ButtonPushedFcn = createCallbackFcn(app, @selectallButtonPushed, true);
            app.selectallButton.BackgroundColor = [0 1 0];
            app.selectallButton.Position = [63 86 67 22];
            app.selectallButton.Text = 'select all';

            % Create ParameterGuessesandFitsLabel
            app.ParameterGuessesandFitsLabel = uilabel(app.DataLoadingandFittingTab);
            app.ParameterGuessesandFitsLabel.FontWeight = 'bold';
            app.ParameterGuessesandFitsLabel.Position = [676 597 171 22];
            app.ParameterGuessesandFitsLabel.Text = 'Parameter Guesses and Fits';

            % Create setdatatofitwithcurrentmodelLabel
            app.setdatatofitwithcurrentmodelLabel = uilabel(app.DataLoadingandFittingTab);
            app.setdatatofitwithcurrentmodelLabel.VerticalAlignment = 'top';
            app.setdatatofitwithcurrentmodelLabel.Position = [133 487 110 30];
            app.setdatatofitwithcurrentmodelLabel.Text = {'<-- set data to fit'; 'with current model.'};

            % Create ofmodelanddataLabel
            app.ofmodelanddataLabel = uilabel(app.DataLoadingandFittingTab);
            app.ofmodelanddataLabel.Position = [181 583 110 22];
            app.ofmodelanddataLabel.Text = ' of model and data.';

            % Create LaunchMultiDataFittingToolButton
            app.LaunchMultiDataFittingToolButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.LaunchMultiDataFittingToolButton.ButtonPushedFcn = createCallbackFcn(app, @LaunchMultiDataFittingToolButtonPushed, true);
            app.LaunchMultiDataFittingToolButton.BackgroundColor = [0.9294 0.6941 0.1255];
            app.LaunchMultiDataFittingToolButton.FontWeight = 'bold';
            app.LaunchMultiDataFittingToolButton.Visible = 'off';
            app.LaunchMultiDataFittingToolButton.Position = [396 562 188 22];
            app.LaunchMultiDataFittingToolButton.Text = 'Launch Multi-Data Fitting Tool';

            % Create FitModelButton
            app.FitModelButton = uibutton(app.DataLoadingandFittingTab, 'state');
            app.FitModelButton.ValueChangedFcn = createCallbackFcn(app, @FitModelButtonValueChanged, true);
            app.FitModelButton.Text = 'Fit Model';
            app.FitModelButton.BackgroundColor = [0 1 0];
            app.FitModelButton.FontWeight = 'bold';
            app.FitModelButton.Position = [1216 467 100 23];

            % Create FittingAlgorithmDropDownLabel
            app.FittingAlgorithmDropDownLabel = uilabel(app.DataLoadingandFittingTab);
            app.FittingAlgorithmDropDownLabel.HorizontalAlignment = 'right';
            app.FittingAlgorithmDropDownLabel.VerticalAlignment = 'bottom';
            app.FittingAlgorithmDropDownLabel.FontWeight = 'bold';
            app.FittingAlgorithmDropDownLabel.Position = [966 500 139 33];
            app.FittingAlgorithmDropDownLabel.Text = 'Fitting Algorithm';

            % Create FittingAlgorithmDropDown
            app.FittingAlgorithmDropDown = uidropdown(app.DataLoadingandFittingTab);
            app.FittingAlgorithmDropDown.Items = {'fminsearch', 'MetropolisHastings'};
            app.FittingAlgorithmDropDown.ValueChangedFcn = createCallbackFcn(app, @FittingAlgorithmDropDownValueChanged, true);
            app.FittingAlgorithmDropDown.Position = [1121 494 203 22];
            app.FittingAlgorithmDropDown.Value = 'fminsearch';

            % Create ParameterFittingandUncertaintyQuantificationLabel
            app.ParameterFittingandUncertaintyQuantificationLabel = uilabel(app.DataLoadingandFittingTab);
            app.ParameterFittingandUncertaintyQuantificationLabel.FontWeight = 'bold';
            app.ParameterFittingandUncertaintyQuantificationLabel.Position = [986 566 286 22];
            app.ParameterFittingandUncertaintyQuantificationLabel.Text = 'Parameter Fitting and Uncertainty Quantification';

            % Create SettingsButton
            app.SettingsButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.SettingsButton.ButtonPushedFcn = createCallbackFcn(app, @SettingsButtonPushed, true);
            app.SettingsButton.BackgroundColor = [1 1 0];
            app.SettingsButton.FontWeight = 'bold';
            app.SettingsButton.Position = [1115 467 84 23];
            app.SettingsButton.Text = 'Settings';

            % Create GraphPosteriorDistributionsButton
            app.GraphPosteriorDistributionsButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.GraphPosteriorDistributionsButton.ButtonPushedFcn = createCallbackFcn(app, @GraphPosteriorDistributionsButtonPushed, true);
            app.GraphPosteriorDistributionsButton.BackgroundColor = [0 1 0];
            app.GraphPosteriorDistributionsButton.FontWeight = 'bold';
            app.GraphPosteriorDistributionsButton.Enable = 'off';
            app.GraphPosteriorDistributionsButton.Position = [1131 431 183 28];
            app.GraphPosteriorDistributionsButton.Text = 'Graph Posterior Distributions';

            % Create SuppressFSPExpansionfasterbutmaybelessaccurateCheckBox
            app.SuppressFSPExpansionfasterbutmaybelessaccurateCheckBox = uicheckbox(app.DataLoadingandFittingTab);
            app.SuppressFSPExpansionfasterbutmaybelessaccurateCheckBox.Text = 'Suppress FSP Expansion (faster but may be less accurate)';
            app.SuppressFSPExpansionfasterbutmaybelessaccurateCheckBox.Position = [1009 520 341 22];

            % Create SetPriorButton
            app.SetPriorButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.SetPriorButton.ButtonPushedFcn = createCallbackFcn(app, @SetPriorButtonPushed, true);
            app.SetPriorButton.BackgroundColor = [1 1 0];
            app.SetPriorButton.FontWeight = 'bold';
            app.SetPriorButton.Position = [1197 543 100 23];
            app.SetPriorButton.Text = 'Set Prior';

            % Create PriorTypeDropDownLabel
            app.PriorTypeDropDownLabel = uilabel(app.DataLoadingandFittingTab);
            app.PriorTypeDropDownLabel.HorizontalAlignment = 'right';
            app.PriorTypeDropDownLabel.FontWeight = 'bold';
            app.PriorTypeDropDownLabel.Position = [1006 543 63 22];
            app.PriorTypeDropDownLabel.Text = 'Prior Type';

            % Create PriorTypeDropDown
            app.PriorTypeDropDown = uidropdown(app.DataLoadingandFittingTab);
            app.PriorTypeDropDown.Items = {'None', 'LogNormal', 'Normal', ''};
            app.PriorTypeDropDown.ValueChangedFcn = createCallbackFcn(app, @PriorTypeDropDownValueChanged, true);
            app.PriorTypeDropDown.Position = [1084 543 100 22];
            app.PriorTypeDropDown.Value = 'None';

            % Create ChooseSSITModel_2
            app.ChooseSSITModel_2 = uidropdown(app.DataLoadingandFittingTab);
            app.ChooseSSITModel_2.Items = {'Other'};
            app.ChooseSSITModel_2.ValueChangedFcn = createCallbackFcn(app, @ChooseSSITModel_2ValueChanged, true);
            app.ChooseSSITModel_2.Visible = 'off';
            app.ChooseSSITModel_2.Position = [135 559 239 22];
            app.ChooseSSITModel_2.Value = 'Other';

            % Create ChooseSSITModelLabel_2
            app.ChooseSSITModelLabel_2 = uilabel(app.DataLoadingandFittingTab);
            app.ChooseSSITModelLabel_2.Visible = 'off';
            app.ChooseSSITModelLabel_2.Position = [16 559 112 22];
            app.ChooseSSITModelLabel_2.Text = 'Choose SSIT Model';

            % Create LinkSpeciesLabel
            app.LinkSpeciesLabel = uilabel(app.DataLoadingandFittingTab);
            app.LinkSpeciesLabel.FontWeight = 'bold';
            app.LinkSpeciesLabel.Position = [25 405 78 22];
            app.LinkSpeciesLabel.Text = 'Link Species';

            % Create DataSpecies1
            app.DataSpecies1 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies1.Position = [112 384 100 22];

            % Create Species1Label
            app.Species1Label = uilabel(app.DataLoadingandFittingTab);
            app.Species1Label.HorizontalAlignment = 'right';
            app.Species1Label.Position = [31 384 73 22];
            app.Species1Label.Text = 'Species 1';

            % Create DataSpecies2
            app.DataSpecies2 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies2.Position = [112 356 100 22];

            % Create Species2Label
            app.Species2Label = uilabel(app.DataLoadingandFittingTab);
            app.Species2Label.HorizontalAlignment = 'right';
            app.Species2Label.Position = [31 357 73 22];
            app.Species2Label.Text = 'Species 2';

            % Create DataSpecies3
            app.DataSpecies3 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies3.Position = [112 326 100 22];

            % Create Species3Label
            app.Species3Label = uilabel(app.DataLoadingandFittingTab);
            app.Species3Label.HorizontalAlignment = 'right';
            app.Species3Label.Position = [31 327 73 22];
            app.Species3Label.Text = 'Species 3';

            % Create DataSpecies4
            app.DataSpecies4 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies4.Position = [112 296 100 22];

            % Create Species4Label
            app.Species4Label = uilabel(app.DataLoadingandFittingTab);
            app.Species4Label.HorizontalAlignment = 'right';
            app.Species4Label.Position = [31 297 73 22];
            app.Species4Label.Text = 'Species 4';

            % Create DataSpecies5
            app.DataSpecies5 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies5.Position = [112 265 100 22];

            % Create Species5Label
            app.Species5Label = uilabel(app.DataLoadingandFittingTab);
            app.Species5Label.HorizontalAlignment = 'right';
            app.Species5Label.Position = [31 266 73 22];
            app.Species5Label.Text = 'Species 5';

            % Create DataSpecies6
            app.DataSpecies6 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies6.Position = [112 237 100 22];

            % Create Species6Label
            app.Species6Label = uilabel(app.DataLoadingandFittingTab);
            app.Species6Label.HorizontalAlignment = 'right';
            app.Species6Label.Position = [32 238 73 22];
            app.Species6Label.Text = 'Species 6';

            % Create DataSpecies7
            app.DataSpecies7 = uidropdown(app.DataLoadingandFittingTab);
            app.DataSpecies7.Position = [112 205 100 22];

            % Create Species7Label
            app.Species7Label = uilabel(app.DataLoadingandFittingTab);
            app.Species7Label.HorizontalAlignment = 'right';
            app.Species7Label.Position = [32 206 73 22];
            app.Species7Label.Text = 'Species 7';

            % Create AddMoreDataButton
            app.AddMoreDataButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.AddMoreDataButton.Position = [89 178 100 23];
            app.AddMoreDataButton.Text = 'Add More Data';

            % Create DataTime
            app.DataTime = uidropdown(app.DataLoadingandFittingTab);
            app.DataTime.Position = [147 437 100 22];

            % Create LinkTimeLabel
            app.LinkTimeLabel = uilabel(app.DataLoadingandFittingTab);
            app.LinkTimeLabel.HorizontalAlignment = 'right';
            app.LinkTimeLabel.Position = [14 437 125 22];
            app.LinkTimeLabel.Text = 'Link time';

            % Create ConstrainDataLabel
            app.ConstrainDataLabel = uilabel(app.DataLoadingandFittingTab);
            app.ConstrainDataLabel.FontWeight = 'bold';
            app.ConstrainDataLabel.Position = [245 334 91 22];
            app.ConstrainDataLabel.Text = 'Constrain Data';

            % Create DataConstrChoice1
            app.DataConstrChoice1 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice1.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice1.Position = [310 309 100 22];

            % Create DataLogical1
            app.DataLogical1 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical1.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical1.Position = [427 309 70 22];
            app.DataLogical1.Value = 'is';

            % Create DataConstrText1
            app.DataConstrText1 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText1.Position = [506 309 158 22];

            % Create AndOr2
            app.AndOr2 = uidropdown(app.DataLoadingandFittingTab);
            app.AndOr2.Items = {'-', 'and', 'or'};
            app.AndOr2.Position = [241 283 60 22];
            app.AndOr2.Value = '-';

            % Create DataConstrChoice2
            app.DataConstrChoice2 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice2.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice2.Position = [310 282 100 22];

            % Create DataLogical2
            app.DataLogical2 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical2.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical2.Position = [427 283 70 22];
            app.DataLogical2.Value = 'is';

            % Create DataConstrText2
            app.DataConstrText2 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText2.Position = [506 283 158 22];

            % Create AndOr3
            app.AndOr3 = uidropdown(app.DataLoadingandFittingTab);
            app.AndOr3.Items = {'-', 'and', 'or'};
            app.AndOr3.Position = [241 254 60 22];
            app.AndOr3.Value = '-';

            % Create DataConstrChoice3
            app.DataConstrChoice3 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice3.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice3.Position = [310 254 100 22];

            % Create DataLogical3
            app.DataLogical3 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical3.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical3.Position = [427 254 70 22];
            app.DataLogical3.Value = 'is';

            % Create DataConstrText3
            app.DataConstrText3 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText3.Position = [506 254 158 22];

            % Create AndOr4
            app.AndOr4 = uidropdown(app.DataLoadingandFittingTab);
            app.AndOr4.Items = {'-', 'and', 'or'};
            app.AndOr4.Position = [241 223 60 22];
            app.AndOr4.Value = '-';

            % Create DataConstrChoice4
            app.DataConstrChoice4 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice4.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice4.Position = [310 223 100 22];

            % Create DataLogical4
            app.DataLogical4 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical4.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical4.Position = [427 223 70 22];
            app.DataLogical4.Value = 'is';

            % Create DataConstrText4
            app.DataConstrText4 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText4.Position = [506 223 158 22];

            % Create AndOr5
            app.AndOr5 = uidropdown(app.DataLoadingandFittingTab);
            app.AndOr5.Items = {'-', 'and', 'or'};
            app.AndOr5.Position = [241 195 60 22];
            app.AndOr5.Value = '-';

            % Create DataConstrChoice5
            app.DataConstrChoice5 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice5.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice5.Position = [310 195 100 22];

            % Create DataLogical5
            app.DataLogical5 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical5.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical5.Position = [427 195 70 22];
            app.DataLogical5.Value = 'is';

            % Create DataConstrText5
            app.DataConstrText5 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText5.Position = [506 195 158 22];

            % Create AndOr6
            app.AndOr6 = uidropdown(app.DataLoadingandFittingTab);
            app.AndOr6.Items = {'-', 'and', 'or'};
            app.AndOr6.Position = [241 165 60 22];
            app.AndOr6.Value = '-';

            % Create DataConstrChoice6
            app.DataConstrChoice6 = uidropdown(app.DataLoadingandFittingTab);
            app.DataConstrChoice6.ValueChangedFcn = createCallbackFcn(app, @DataConstrChoice1ValueChanged, true);
            app.DataConstrChoice6.Position = [310 165 100 22];

            % Create DataLogical6
            app.DataLogical6 = uidropdown(app.DataLoadingandFittingTab);
            app.DataLogical6.Items = {'is', 'isnot', '>', '<', '>=', '<='};
            app.DataLogical6.Position = [427 165 70 22];
            app.DataLogical6.Value = 'is';

            % Create DataConstrText6
            app.DataConstrText6 = uieditfield(app.DataLoadingandFittingTab, 'text');
            app.DataConstrText6.Position = [506 165 158 22];

            % Create ClearConstraintsButton
            app.ClearConstraintsButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.ClearConstraintsButton.ButtonPushedFcn = createCallbackFcn(app, @ClearConstraintsButtonPushed, true);
            app.ClearConstraintsButton.Position = [344 334 108 23];
            app.ClearConstraintsButton.Text = 'Clear Constraints';

            % Create FieldsinDataTextAreaLabel
            app.FieldsinDataTextAreaLabel = uilabel(app.DataLoadingandFittingTab);
            app.FieldsinDataTextAreaLabel.HorizontalAlignment = 'right';
            app.FieldsinDataTextAreaLabel.Position = [323 523 78 22];
            app.FieldsinDataTextAreaLabel.Text = 'Fields in Data';

            % Create FieldsinDataTextArea
            app.FieldsinDataTextArea = uitextarea(app.DataLoadingandFittingTab);
            app.FieldsinDataTextArea.Position = [330 366 221 158];
            app.FieldsinDataTextArea.Value = {'None - need to load data first.'};

            % Create TotalCellsInDataLabel
            app.TotalCellsInDataLabel = uilabel(app.DataLoadingandFittingTab);
            app.TotalCellsInDataLabel.Position = [480 118 172 22];
            app.TotalCellsInDataLabel.Text = 'Total Cells In Data:';

            % Create NumberafterConstraintsLabel
            app.NumberafterConstraintsLabel = uilabel(app.DataLoadingandFittingTab);
            app.NumberafterConstraintsLabel.Position = [444 94 208 22];
            app.NumberafterConstraintsLabel.Text = 'Number after Constraints:';

            % Create SolveandPlotButton
            app.SolveandPlotButton = uibutton(app.DataLoadingandFittingTab, 'push');
            app.SolveandPlotButton.ButtonPushedFcn = createCallbackFcn(app, @SolveandPlotButtonPushed, true);
            app.SolveandPlotButton.BackgroundColor = [0 1 0];
            app.SolveandPlotButton.FontWeight = 'bold';
            app.SolveandPlotButton.Position = [281 62 161 28];
            app.SolveandPlotButton.Text = 'Solve and Plot';

            % Create IncludeDataDistortionsinModelLabel
            app.IncludeDataDistortionsinModelLabel = uilabel(app.UIFigure);
            app.IncludeDataDistortionsinModelLabel.FontWeight = 'bold';
            app.IncludeDataDistortionsinModelLabel.Visible = 'off';
            app.IncludeDataDistortionsinModelLabel.Position = [1448 535 197 22];
            app.IncludeDataDistortionsinModelLabel.Text = 'Include Data Distortions in Model';

            % Create SetDistortionParametersButton_2
            app.SetDistortionParametersButton_2 = uibutton(app.UIFigure, 'push');
            app.SetDistortionParametersButton_2.ButtonPushedFcn = createCallbackFcn(app, @SetDistortionParametersButtonPushed, true);
            app.SetDistortionParametersButton_2.BackgroundColor = [1 1 0];
            app.SetDistortionParametersButton_2.Enable = 'off';
            app.SetDistortionParametersButton_2.Visible = 'off';
            app.SetDistortionParametersButton_2.Position = [1527 480 154 22];
            app.SetDistortionParametersButton_2.Text = 'Set Distortion Parameters';

            % Create ShowDistortionPlotButton_2
            app.ShowDistortionPlotButton_2 = uibutton(app.UIFigure, 'push');
            app.ShowDistortionPlotButton_2.ButtonPushedFcn = createCallbackFcn(app, @ShowDistortionPlotButtonPushed, true);
            app.ShowDistortionPlotButton_2.BackgroundColor = [1 1 0];
            app.ShowDistortionPlotButton_2.Enable = 'off';
            app.ShowDistortionPlotButton_2.Visible = 'off';
            app.ShowDistortionPlotButton_2.Position = [1690 480 125 22];
            app.ShowDistortionPlotButton_2.Text = 'Show Distortion Plot';

            % Create pdo_parameters_table
            app.pdo_parameters_table = uitable(app.UIFigure);
            app.pdo_parameters_table.ColumnName = {'Name'; 'Value'; 'Fit? (y/n)'};
            app.pdo_parameters_table.ColumnWidth = {75, 'auto'};
            app.pdo_parameters_table.RowName = {};
            app.pdo_parameters_table.ColumnEditable = [false true true];
            app.pdo_parameters_table.Visible = 'off';
            app.pdo_parameters_table.Position = [1567 305 298 147];

            % Create DistortionParameterGuessesandFitsLabel
            app.DistortionParameterGuessesandFitsLabel = uilabel(app.UIFigure);
            app.DistortionParameterGuessesandFitsLabel.FontWeight = 'bold';
            app.DistortionParameterGuessesandFitsLabel.Visible = 'off';
            app.DistortionParameterGuessesandFitsLabel.Position = [1567 452 229 22];
            app.DistortionParameterGuessesandFitsLabel.Text = 'Distortion Parameter Guesses and Fits';

            % Create UpdatePDOParametersButton
            app.UpdatePDOParametersButton = uibutton(app.UIFigure, 'push');
            app.UpdatePDOParametersButton.ButtonPushedFcn = createCallbackFcn(app, @UpdatePDOParametersButtonPushed, true);
            app.UpdatePDOParametersButton.BackgroundColor = [1 1 0];
            app.UpdatePDOParametersButton.Visible = 'off';
            app.UpdatePDOParametersButton.Position = [1502 376 53 22];
            app.UpdatePDOParametersButton.Text = 'Update';

            % Create FitinBackgroundmaclinuxonlyButton
            app.FitinBackgroundmaclinuxonlyButton = uibutton(app.UIFigure, 'state');
            app.FitinBackgroundmaclinuxonlyButton.ValueChangedFcn = createCallbackFcn(app, @FitinBackgroundmaclinuxonlyButtonValueChanged, true);
            app.FitinBackgroundmaclinuxonlyButton.Visible = 'off';
            app.FitinBackgroundmaclinuxonlyButton.Text = 'Fit in Background (mac/linux only)';
            app.FitinBackgroundmaclinuxonlyButton.BackgroundColor = [0 1 0];
            app.FitinBackgroundmaclinuxonlyButton.FontWeight = 'bold';
            app.FitinBackgroundmaclinuxonlyButton.Position = [1488 81 211 28];

            % Create RunFitsinBackgroundLabel
            app.RunFitsinBackgroundLabel = uilabel(app.UIFigure);
            app.RunFitsinBackgroundLabel.VerticalAlignment = 'bottom';
            app.RunFitsinBackgroundLabel.FontWeight = 'bold';
            app.RunFitsinBackgroundLabel.Visible = 'off';
            app.RunFitsinBackgroundLabel.Position = [1452 132 160 21];
            app.RunFitsinBackgroundLabel.Text = 'Run Fits in Background';

            % Create LoadPreviousResultsDropDownLabel
            app.LoadPreviousResultsDropDownLabel = uilabel(app.UIFigure);
            app.LoadPreviousResultsDropDownLabel.HorizontalAlignment = 'right';
            app.LoadPreviousResultsDropDownLabel.FontWeight = 'bold';
            app.LoadPreviousResultsDropDownLabel.Visible = 'off';
            app.LoadPreviousResultsDropDownLabel.Position = [1481 55 134 22];
            app.LoadPreviousResultsDropDownLabel.Text = 'Load Previous Results';

            % Create LoadPreviousResultsDropDown
            app.LoadPreviousResultsDropDown = uidropdown(app.UIFigure);
            app.LoadPreviousResultsDropDown.ValueChangedFcn = createCallbackFcn(app, @LoadPreviousResultsDropDownValueChanged, true);
            app.LoadPreviousResultsDropDown.Visible = 'off';
            app.LoadPreviousResultsDropDown.Position = [1622 55 424 22];

            % Create RefreshResultsButton
            app.RefreshResultsButton = uibutton(app.UIFigure, 'state');
            app.RefreshResultsButton.ValueChangedFcn = createCallbackFcn(app, @RefreshResultsButtonValueChanged, true);
            app.RefreshResultsButton.Visible = 'off';
            app.RefreshResultsButton.Text = 'Refresh Results';
            app.RefreshResultsButton.BackgroundColor = [0 1 0];
            app.RefreshResultsButton.FontWeight = 'bold';
            app.RefreshResultsButton.Position = [1703 80 110 28];

            % Create FitResultsNameLabel
            app.FitResultsNameLabel = uilabel(app.UIFigure);
            app.FitResultsNameLabel.Visible = 'off';
            app.FitResultsNameLabel.Position = [1474 106 102 22];
            app.FitResultsNameLabel.Text = 'Fit Results Name:';

            % Create FitResultsNameText
            app.FitResultsNameText = uilabel(app.UIFigure);
            app.FitResultsNameText.Visible = 'off';
            app.FitResultsNameText.Position = [1577 106 449 22];
            app.FitResultsNameText.Text = 'Untitled';

            % Create DistortionTypeDropDown_2Label
            app.DistortionTypeDropDown_2Label = uilabel(app.UIFigure);
            app.DistortionTypeDropDown_2Label.HorizontalAlignment = 'right';
            app.DistortionTypeDropDown_2Label.Visible = 'off';
            app.DistortionTypeDropDown_2Label.Position = [1471 509 86 22];
            app.DistortionTypeDropDown_2Label.Text = 'Distortion Type';

            % Create DistortionTypeDropDown_2
            app.DistortionTypeDropDown_2 = uidropdown(app.UIFigure);
            app.DistortionTypeDropDown_2.Items = {'None', 'Binomial', 'Binomial - State Dependent', 'Binomial - Parametrized', 'Poisson', 'Poisson - State Dependent', 'Poisson - Parametrized', 'Binning', 'Custom Function'};
            app.DistortionTypeDropDown_2.ValueChangedFcn = createCallbackFcn(app, @DistortionTypeDropDownValueChanged, true);
            app.DistortionTypeDropDown_2.Visible = 'off';
            app.DistortionTypeDropDown_2.Position = [1572 509 241 22];
            app.DistortionTypeDropDown_2.Value = 'None';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = SSITGUI

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>